---
Ресурсы:

// оф сайт
- [ https://www.jaegertracing.io/docs/1.21/ ]
 


---
элементы документа 

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение 
[*] - важное контекстное примечание 
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку 

---
краткое описание 

- [ jaeger ] Это система для распределенной трассировки, поддерживает стандарт "opentracing".


1) Вводная
  - [ https://github.com/yurishkuro/opentracing-tutorial/tree/master/java ]
  


2) архитектура
  - [ https://www.jaegertracing.io/docs/1.21/architecture/ ]  
  - [ https://habr.com/ru/company/srg/blog/446752/ ]
  - компоненты:
    - [ Jaeger-agent ] — локальный агент, который обычно стоит на каждой машине 
      и в него логируют сервисы на локальный дефолтный порт. Если агента нет, 
      то трейсы всех сервисов на этой машине обычно выключены.
    - [ Jaeger-collector ] в него все агенты посылают собранные трейсы, а он кладет их в выбранную БД
    - [ База данных ] предпочтительная у них cassandra, но у нас используется elasticsearch, 
      есть реализации еще под пару других бд и in memory реализация, которая ничего не сохраняет на диск
    - [ Jaeger-query ] это сервис который ходит в базу данных и отдает уже собранные трейсы для анализа
    - [ Jaeger-ui ] это веб интерфейс для поиска и просмотров трейсов, он ходит в jaeger-query




-- библиотека: https://github.com/opentracing-contrib/java-spring-jaeger
- аннотация: @Traced
- используем эту либу:
  --- [ opentracing-spring-jaeger-cloud-starter ]
-- может помочь добавление [ opentracing-spring-cloud-starter ]
<dependency>
   <groupId>io.opentracing.contrib</groupId>
   <artifactId>opentracing-spring-cloud-starter</artifactId>
</dependency>


 

[?] nop
  - nop

 
 
// #c 
#----------------------------------------------- 

 

#----------------------------------------------- 
 
