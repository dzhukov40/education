---
Ресурсы:

// оф сайт
- [ https://www.ansible.com/ ]
 


---
элементы документа 

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение 
[*] - важное контекстное примечание 
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку 

---
краткое описание 

- [ansible]  супер круть программа удаленного конфигурирования.
Работа идет по ssh, никакого ПО на клиенты устанавливать не надо.
Ansible Vault - позволяет безопасно хранить пароли и ключи.
Поддерживается идентпотенность.
Может работать в несколько потоков.
Есть функционал тянуть из GIT плейбук и выполнять его.



1) устанавливаем
  - Устанавливаем [ sudo apt install ansible ]
  - тестируем соединение:
    - [ ping <ip_remote> ]
    - [ ssh <user_remote>@<ip_remote> ]
  - пингуем проверяем все ли ок
    (*) если не пингуется возможно не настроен заход по ключу RSA
    [ ansible Group1 -m ping ]
    (*) если нас парят группы можем прямо указать конретный адрес
    [ ansible 192.168.56.11 -m ping ]


1a) устанавливаем на mac
  - инструкция
    - [ https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#from-pip ]
  - для устнаовки нам нужен (pip)
    - [ https://pip.pypa.io/en/stable/ ]
  - [ brew install python ] устанавливаем питон
  - [ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py ] качаем
  - [ python get-pip.py ] запускаем
    - [!] в PATH не прописался путь до pip
      - [ cd ~ ] идем домой
        - создаем файл, если его небыло
          - [ touch .zshrc ] будет запускаться при каждом стате терминала
      - [ vim .zshrc ] открываем в редакторе
      - [ export PATH="$PATH:/Users/a18464058/Library/Python/2.7/bin" ] добавляем
      - [ chmod +x .zshrc ] делаем исполняемым
      - перезапускаем терминал
  - [ pip install ansible ] устанавливаем ansible
  - рестартуем терминал
  - [ ansible --version ] проверяем



2) Состав инструмента
  - [ ansible ] запуск отдельных команд и модулей 
  - [ ansible-console ] запуск команд и модулей в интерактивном режиме
  - [ ansible-doc ] документация по модулям
  - [ ansible-galaxy ] инструмент для управления ролями
  - [ ansible-playbook ] запуск плейбуков
  - [ ansible-pull ] позволяет забирать конфигурации и плейбуки из GIT и затем выполнять
  - [ ansible-vault ] инструмент для шифрования плейбуков и паролей
  - [ /etc/ansible/ansible.cfg ] конфигурационный файл
    - порядок выполнения конфигурационных файлов:
    - Конфигурации НЕсливаются, Ansible начнет использовать первый найденный источник!
    - [ $ANSIBLE_CONFIG2 , ./ansible.cfg , ~/.ansible.cfg , /etc/ansible/ansible.cfg ]
  - [ /etc/ansible/hosts ] (inventory) файл по умолчанию
    - это файл, который содержит список управляемых хостовили групп этих хостов
    - путь к такому файлу можно задать при запуске



3) Плейбуки (Playbooks)
  - Любой плейбук состоит из набора задач (Play)
  - [ ansible-playbook<имя_плэйбука> ] пример запуска плейбука




4) Модули (Module)
  - [ Module ] исполняемая единица инструмента Ansible, 
  которая отправляется на управляемые машины для выполнения задач. 
  - Делятся на два типа:
    - [ Core Modules ] Типизированный набор основных модулей.
    - [ Extras Modules ] Дополнительные модулив будущем могут стать основными.


5) Факты (Facts)
  - Перед выполнением первой задачи Ansibleвызывает специальный модуль setup. 
    Этот модуль подключается к хосту и собирает различную информацию 
    о нем – так называемые «факты»
  - [ ansible localhost -m setup ] получить набор фактов, вызвав вручную




6) Модули произвольных команд
  - задачи с использованием этих модулей всегда в статусе changed.
  - (*) использовать только если нет альтернатив
  - команды:
    - [ command ] принимает команду с аргументами и выполняет ее 
      на управляемых серверах. Эта команда будет выполнена не в shell
    - [ shell ] команда будет выполнена не в shell
    - [ raw ] запускается ”грязная” SSH команда, без загрузки 
      какой либо Python инфраструктуры инструмента Ansible.
    - [ script ] Модуль берет скрипт в локальной папке, отправляет 
      на удаленный сервер и выполняет его в shell со всеми аргументами, 
      с которыми мы захотели его передать.






[?] как поменять пользователя?
  - [ Become ] это встроенный механизм подмены привилегий. 
    С помощью этого механизма мы можем выполнять наши задачи 
    на управляемом хосте из под юзера отличного от того, 
    кем мы запускаем плэйбук на управляющем сервере. 


[?] где посмотреть дополнительную информацию ?
  - [ http://docs.ansible.com/ansible/index.html ] Официальная документация
  - [ https://github.com/freetonik/ansible-tuto-rus ] Туториал на русском
  - [ http://yaml.org/spec/1.2/spec.html ] Стандарт YAML
  - [ http://www.yaml.org/YAML_for_ruby.html ] YAML Cookbook
  - [ http://jinja.pocoo.org ] Официальный сайтJINJA2




[?] nop
  - nop

 
 
// #c 
#----------------------------------------------- 

 

#----------------------------------------------- 
 