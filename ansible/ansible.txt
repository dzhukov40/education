---
Ресурсы:

// оф сайт
- [ https://www.ansible.com/ ]
 


---
элементы документа 

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение 
[*] - важное контекстное примечание 
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку 

---
краткое описание 

- [ansible]  супер круть программа удаленного конфигурирования.
Работа идет по ssh, никакого ПО на клиенты устанавливать не надо.
Ansible Vault - позволяет безопасно хранить пароли и ключи.
Поддерживается идентпотенность.
Может работать в несколько потоков.
Есть функционал тянуть из GIT плейбук и выполнять его.



1) устанавливаем
  - Устанавливаем [ sudo apt install ansible ]
  - тестируем соединение:
    - [ ping <ip_remote> ]
    - [ ssh <user_remote>@<ip_remote> ]
  - пингуем проверяем все ли ок
    (*) если не пингуется возможно не настроен заход по ключу RSA
    [ ansible Group1 -m ping ]
    (*) если нас парят группы можем прямо указать конретный адрес
    [ ansible 192.168.56.11 -m ping ]


1a) устанвливаем на mac
  - [ brew install ansible ]
  - [ ansible --version ] проверяем


2) Состав инструмента
  - [ ansible ] запуск отдельных команд и модулей 
  - [ ansible-console ] запуск команд и модулей в интерактивном режиме
  - [ ansible-doc ] документация по модулям
  - [ ansible-galaxy ] инструмент для управления ролями
  - [ ansible-playbook ] запуск плейбуков
  - [ ansible-pull ] позволяет забирать конфигурации и плейбуки из GIT и затем выполнять
  - [ ansible-vault ] инструмент для шифрования плейбуков и паролей
  - [ /etc/ansible/ansible.cfg ] конфигурационный файл
    - порядок выполнения конфигурационных файлов:
    - Конфигурации НЕсливаются, Ansible начнет использовать первый найденный источник!
    - [ $ANSIBLE_CONFIG2 , ./ansible.cfg , ~/.ansible.cfg , /etc/ansible/ansible.cfg ]
  - [ /etc/ansible/hosts ] (inventory) файл по умолчанию
    - это файл, который содержит список управляемых хостовили групп этих хостов
    - путь к такому файлу можно задать при запуске



3) Плейбуки (Playbooks)
  - Любой плейбук состоит из набора задач (Play)
  - [ ansible-playbook<имя_плэйбука> ] пример запуска плейбука




4) Модули (Module)
  - [ Module ] исполняемая единица инструмента Ansible, 
  которая отправляется на управляемые машины для выполнения задач. 
  - Делятся на два типа:
    - [ Core Modules ] Типизированный набор основных модулей.
    - [ Extras Modules ] Дополнительные модулив будущем могут стать основными.


5) Модуль Факты (Facts)
  - Перед выполнением первой задачи Ansibleвызывает специальный модуль setup. 
    Этот модуль подключается к хосту и собирает различную информацию 
    о нем – так называемые «факты»
  - [ ansible localhost -m setup ] получить набор фактов, вызвав вручную




6) Модули произвольных команд
  - задачи с использованием этих модулей всегда в статусе changed.
  - (*) использовать только если нет альтернатив
  - команды:
    - [ command ] принимает команду с аргументами и выполняет ее 
      на управляемых серверах. Эта команда будет выполнена не в shell
    - [ shell ] команда будет выполнена не в shell
    - [ raw ] запускается ”грязная” SSH команда, без загрузки 
      какой либо Python инфраструктуры инструмента Ansible.
    - [ script ] Модуль берет скрипт в локальной папке, отправляет 
      на удаленный сервер и выполняет его в shell со всеми аргументами, 
      с которыми мы захотели его передать.



7) Модуль отладки (Debug)
  - является мощным инструментом для отладкиплэйбуков во время их выполнения 
    и, что важно, без надобности останавливать его выполнение.
  - Для того, чтобы отслеживать статус какой либо задачи во время 
    выполнения плэйбука, можно записать этот статус в переменную с 
    помощью директивы registerи также выводить тем же модулем debug.
  - [ when ] удобно использовать в модуле модуль Debug. 
    Можно определить действие при выполнении какого то условия


8) Переменные
  - Избегать создание переменных с одинаковым именем, значение перепишется
  - [ extra vars ] передаваемые в командной строке.
  - [ set_fact/register vars ] определяются отдельным таскомс директивой 
  - [ set_fact ] или в таске директивой register.
  - [ include_vars ] динамически подключаемые различными способами yaml или json файлы с переменными.
  - [ include_params ] параметры передаваемые при подключении.
  - [ role (and include_role) params ] параметры, передаваемые при вызове роли (или подключаемой роли).
  - [ task vars ] определяемые в рамках конкретной задачи.
  - [ block vars ] определяемые в рамках конкретного блока.
  - [ role vars ] определяемые в структуре роли в role/vars/main.yml 
  - [ play vars_files ] подключаемые файлы с переменными в рамках одного play.
  - [ play vars_promt ] интерактивно запрашиваемые переменные во время выполнения play.
  - [ play vars ] определяемые в рамках одного play.
  - [ host facts ] переменные о хостах, получаемые в результате выполнения модуля setup.
  - [ playbook host-vars/* ] определяемые в файле host_vars/host.yml относительно плэйбука.
  - [ inventory host-vars/* ] определяемые в файлеhost_vars/host.yml относительно главного инвентори файла.
  - [ inventory file/script host vars ] в главном инвентори файлеили получаемые из динамического инвентори.
  - [ playbook group-vars/* ] определяемые в файле group_vars/group.yml относительно плэйбука.
  - [ inventory group-vars/* ] определяемые в файлеgroup_vars/group.yml относительно главного инвентори файла.
  - [ inventory file/script group vars ] в главном инвентори файле или получаемые из динамического инвентори.
  - [ role defaults ] переменные роли применяемые по умолчанию в файле role/defaults/main.yml


9) Инвентори
  - Можно указывать список хостов, группы, группы групп и переменные хостов и групп
  - [ Динамический инвентори ] То есть при запуске плэйбука мы указываем не файл с хостами, 
    а скрипт, который будет динамически получать данные из консула
    - [ ansible-playbook-iconsul_invetory.py<имя_плэйбука> ] пример


10) Обработчики или хендлеры (Handlers)
  - это обычная задача, но она будет запущена только тогда, 
    когда есть другая задача, которая выполнилась, 
    что-то изменила и с помощью директивы notify вызвала задачу.



11) Модуль Шаблоны (Template)
 - используется язык шаблонов (Jinja2) файлы с расширением [ .j2 ]
 - в сам темплэйтможно подставить переменные в режиме 
   реального времени (после запуска плэйбука)



12) Роли (Role)
  - Это способ описать весь конечный набор задач.
    Тоесть например роль фронт и роль бек, в роль фронт 
    войдет набор задачь для конфигурирования фронта приложения, 
    а на роль бек соответственно все необходимое для серверной части.
  - Существует глобальный репозиторий ролей
    - [ http://galaxy.ansible.com ]



13) Условия
  - Математические:
    - [ == ] равно
    - [ != ] не равно
    - [ > ] больше
    - [ < ] меньше
    - [ >= ] больше или равно
    - [ <= ] меньше или равно
  - Логические:
    - [ and , or , not ] 
  - Проверка на вхождение:
    - [ in , not in ]
  - Проверка на существования:
    - [ is defined , is undefined ]




14) Модуль данных о файле (Stat)
  - этот модуль позволяет получить состояние файла в системе в виде набора фактов, 
    по которым потом можно строить условия
  - у нас есть куча различных циклов:
    - [ with_nested ] вложенные циклы.
    - [ with_dict ] цикл по словарю (хэшу).
    - [ with_file ] цикл по содержимомуфайлов. 
    - [ with_fileglob ] цикл на совпадение имени файла с заданным шаблоном (не рекурсивный).
    - [ with_together ] параллельный цикл по двум наборам данных.  
    - [ with_subelements ] цикл по вложенным элементам сложного словаря (хэша).
    - [ with_sequence ] динамически создающийся цикл по целочисленной последовательности. 
    - [ with_random_choice ] случайный выбор из предопределенных значений.
    - [ do-until ] цикл, повторяющийся до выполнения определенного условия.
    - [ with_first_found ] цикл до первого найденного файла.
    - [ with_lines ] цикл по результатам работы какой либо команды (списку строк результата).
    - [ with_indexed_items ] цикл показывающий сразу и значение элемента и его индекс в массиве (редко используется).
    - [ with_ini ] с помощью этого цикла, мы можем пройтись по ini файлу и выдать только необходимые данные (по сути это отдельный модуль).
    - [ with_inventory_hostnames ] цикл для прохода по инвентори файлам.
    - [ with_flattened ] редкие ситуации, когда у нас сложная структура данных (список вложенный в список) и нам необходимо пройти циклом по всем элементам. 




15) Теги (Tags)
  - мы моем написать плейбук с набором задач и пометить их тегами,
    потом делая команду на исполнение выбирать те задачи которые надо выполнить
    - пример запуска с выбором задач
      - [ ansible-playbook my.yml--tags "install,config" ]
      - (*) порядок выполнения задач определяется плейбуком



18) Блоки (Blocks)
  - это еще один способ лучше структурировать задачи в наших плэйбуках. 
    К блоку задач можно применить директивы, отличные от глобальных параметров плэйбука
  - мы можем создавать блоки задач с тэгом.













[?] как поменять пользователя?
  - [ Become ] это встроенный механизм подмены привилегий. 
    С помощью этого механизма мы можем выполнять наши задачи 
    на управляемом хосте из под юзера отличного от того, 
    кем мы запускаем плэйбук на управляющем сервере. 


[?] где посмотреть дополнительную информацию ?
  - [ http://docs.ansible.com/ansible/index.html ] Официальная документация
  - [ https://github.com/freetonik/ansible-tuto-rus ] Туториал на русском
  - [ http://yaml.org/spec/1.2/spec.html ] Стандарт YAML
  - [ http://www.yaml.org/YAML_for_ruby.html ] YAML Cookbook
  - [ http://jinja.pocoo.org ] Официальный сайтJINJA2




[?] nop
  - nop

 
 
// #c 
#----------------------------------------------- 

 

#----------------------------------------------- 
 