---
Ресурсы:

// оф сайт
- вводный курс [ https://stepik.org/course/73/syllabus ]
 


---
элементы документа 

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение 
[*] - важное контекстное примечание 
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку 

---
краткое описание 

- [linux] семейство Unix-подобных операционных систем на базе ядра Linux, 
включающих тот или иной набор утилит и программ проекта GNU


1) есть UI интерфейс для обновления установленных программ
  - [ softvare updater ]

2) поиск по истории команд в баше
  - [ ctrl + r ] печатаем тоисковый запрос
    - [ ctrl + r ] перебираем варианты

3) скачать файл по ссылке [ wget <url> ]
  - скачать в директорию [ wget -P <path> <url> ]
  - скачать в директорию и указать имя файла [ wget -O <name> <url> ]
  - передать на вход файл с ссылками  [ wget -i <path> ]
  - рекурсивное скачивание [ wget -r -l <глубина> <url> ]
    - можно указать типы файлов [ -A ]

4) искать файлы
  - [ find <директория> -name <имя файла> ]
    - (*) можно указывать регулярку м имени или пути [ * , ? ]

5) искать строчку в содержимом файла
  - [ grep  <строчка>  <файл> ] 
  - найти количество вхождений [ grep -с <строчка>  <файл> ] 
  - найти во всех файлах в папке [ grep -r <строчка>  <директория> ] 

6) копирование файлов по  ssh
  - получить файл с сервера
    - [ scp -P порт  логин@адрес_сервера:путь_откуда  путь_куда ]
  - отправить файл на сервер
    - [ scp -P порт  путь_откуда  логин@адрес_сервера:путь_куда ]

7) работа с запущенными процессами
  - запуск команды в фоне [ <команда> & ]
  - [ ctrl + c ] прервать процессами
  - [ ctrl + z ] приостановить выполнение
    - [ jobs ] посмотреть список запущенных приложений
      - [ fg %<номер> ] продолжить процесс ( foreground )
      - [ bg %<номер> ] продолжить процесс ( background )

8) посмотреть процессы
  - [ ps -aux ] список всех запущенных процессов
  - [ top ] посмотреть процессы в реальном времени
  
9) убить процесс
  - [ kill -9 <номер процесса>]

10) ставим полезную утилиту tmux
  - свободная консольная утилита-мультиплексор, 
  предоставляющая пользователю доступ к нескольким терминалам в рамках одного экрана.
  - заходим на удаленный сервер и там запускаем tmux
    - можем запустить команду и отконектиться от сервера  [ ctrl + B + D ]
    запущенная программа продолжет работать и потом можем назад присоединиться [ tmux attach ]
  - (*) tmux  сохранит всю историю команд выполненных на сервере
    - info: tmux’s authors describe it as a terminal multiplexer
      You see that tmux basically offers two big features:
      - 1. Window management in your terminal 
        Within one terminal window you can open multiple windows 
        and split-views (called “panes” in tmux lingo). 
        Each pane will contain its own, 
        independently running shell instance (bash, zsh, whatever you’re using). 
        This allows you to have multiple terminal commands 
        and applications running side by side without the need to open 
        multiple terminal emulator windows.
      - 2. Session management 
        On top of that tmux keeps these windows and panes in a session. 
        You can exit a session at any point. This is called “detaching”. 
        tmux will keep this session alive until you kill the tmux server (e.g. when you reboot). 
        This is incredibly useful because at any later point in time 
        you can pick that session up exactly from where you left it 
        by simply “attaching” to that session.
    - install (macOS)
      - [ brew install tmux ]
    - режим просмотра истории команд [ ctrl + B + PgUp ]
      - перемещения по истории [ PgUp, PgDown, стрелки ]
      - выйти из режима [ Esc, Ctrl + C ]
  - (*) tmux  гарантирует что при потере соединения, запущенные программы продолжат работу
  - [ sudo apt install tmux -y ]
  - для ввода команды нужно:
    - зажать (одновременно) клавиши Ctrl и B, затем отпустить их 
    и только потом ввести "командный" символ. 
  - создать новую вкладку [ ctrl + B + C ]
    - вкладки отображаются внизу
  - переключаться между вкладками  [ ctrl + B + <номер вкладки> ]
    - бегать вправо/влево по вкладкам  [ ctrl + B + N/P ]
  - закрыть вкладку  [ ctrl + B + X ] или [ exit ]
  - можно разделять вкладку на части
    - Для "горизонтального" разделения используется [ Ctrl+B и " ]
    - Для "вертикального" [ Ctrl+B и % ]
    - перемещения между окнами: [ ctrl + B + стрелки ]

11) работаем с мощной программой для рисования графиков [ gnuplot ]
  - есть два режима работы
    - интерактивный (вводим команду и она тут же обрабатывается)
    - потоковый (вводим ряд команд и они отрабатывают за раз)
  - (*) запускаем [ gnuplot ] -> чтобы выйти, вводим [ exit ]
  - построить график по данным в файле
    - [ plot <файл> using 1:2 ] первая колонка 'X' вторая 'Y'
    - [ plot <файл> using 1:2, <файл> using 1:3 ] построить два графика
  - ПОТОКОВЫЙ РЕЖИМ
    - пишем скрипт а потом его запускаем
    - создаем файл [  plot.gnu ] : 
      [
        #! /usr/bin/gnuplot -persist
        set terminal png enhanced
        set output "plot.png"
        set grid
 
        plot "data.csv" using 1:2
      ]
    - запускаем gnuplot --persist <файл>
      - (*) можем сделать исполняемым и просто запустить файл
  - можем строить графики функций, рисовать изображения, работать с 3d

12) права на файл/директорию [ chmod/chown ]
  - chmod [ugoa] [+-] [rwx] <Путь>
    - chmod ug+x test.txt (*) сделать исполняемым для пользователя и группы
  - изменить пользователя файла [ chown newUser:newGroup <Путь>]


14) добавляем аллиас в mac
- [ cd ~ ] идем домой
- [ touch .zshrc ] создаем файл, будет запускаться при каждом стате терминала
- [ vim .zshrc ] открываем в редакторе
- [ alias ll='ls -lG' ] добавляем алиас
- [ chmod +x .zshrc ] делаем исполняемым
- перезапускаем терминал


15) Сервисы
  - [ https://bash.cyberciti.biz/guide/Service_command ]
  - обфчно скрипты запуска находятся в [ /etc/init.d ]
  - типичный набор команд [ status, start, stop, restart ]
  - [ service <имя скрипта> <команда> ]
  - (*) для Centos(Rhel) уже используется другая команда [ systemctl ]










[?] nop
  - nop

 
 
// #c 
#----------------------------------------------- 

 

#----------------------------------------------- 
 
