---
Ресурсы:

// оф сайт
- [ https://golang.org/ ]
 


---
элементы документа 

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение 
[*] - важное контекстное примечание 
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку 

---
краткое описание 

- [ golang ] это язык программирования. Очень простой, компилируемый.




1) Устанавливаем на ubuntu
  - [ https://golang.org/dl/ ] качаем архив
  - [ sudo tar -C /usr/local -xzf go1.14.6.linux-amd64.tar.gz ] распаковываем
  - [ export PATH=$PATH:/usr/local/go/bin ] добавляем в PATH
  - [ go ] проверяем


2) первые приложения
  - создадим файл [ main.go ] 
    - [ go run main.go ] запуск
    - [ go build main.go ] скомпилировать бинарный файл
  - [ hello.go ] первый пример "hello"
  - [ http_server.go ] второй пример  "web service"  


3) пакеты
  - [ package main ] объявили новый пакет, в любом проекте должен быть обязательно пакет main. 
    Запуск программы начинается именно с этого пакета.
    - (*) [ func main(){} ] обязательная ф-я, запускается при старте программы
  - [ import "fmt" ] импортировали пакет ввода/вывода.


4) Типы данных
  - [ uint8 , uint16, uint32, uint64	] Беззнаковые целые числа 
  - [ int8 , int16, int32, int64	] Знаковые целые числа 
  - [ byte ] то же самое, что "uint8"
  - [ rune ] то же самое, что "int32"
  - [ uint, int, uintptr ] Машинно-зависимых целочисленных типы
  - [ float32, float64 ] Числа с плавающей точкой
  - [ complex64, complex128 ] Комплексные числа 
  - [ "Hello", `Hello` ] Cтроки. Cтроки в двойных кавычках не могут содержать 
    новые строки и они позволяют использовать особые управляющие последовательности символов. Например, \n будет заменена символом новой строки, а \t - символом табуляции.
  - [ bool ] логический тип. (truе или false)


5) Переменные
  - [ var ] ключевое слово для определения переменной
    - [ var <имя_переменной> <тип_данных> ] определение переменной
    - [ var hello string ] переменная называется "hello" и представляет тип "string"
    - [ var hello = "Hello" ] тут мы сразу задаем значение, тип выведется из значения
    - [ a := 5 ] короткая запись обьявления переменной, можно использовать только в функциях
    - (*) можно обявить несколько переменных в одном "var"
      [
        var (
          name string = "Dima"
          age int = 23
        )
      ]
    - (*) Go - регистрозависимый язык


6) Минитемы:
  - Арифметические операции
    - [ +, -, *, /, %, ++, -- ]
  - коментарии
    - [ /*  */ ] многострочные
    - [ // ] однострочный коментарий
  - константы
  

 
7) Консоль
  - [ import "fmt" ] пакет для работы с консолью
  - [ fmt.Println("Hello") ] вывод
  - [ fmt.Scan(&name) ] ввод (*) значение кладем в  переменную "var name string"















[?] nop
  - nop

 
 
// #c 
#----------------------------------------------- 

 

#----------------------------------------------- 
 
