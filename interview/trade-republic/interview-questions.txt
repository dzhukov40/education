---
Ресурсы:

// оф сайт
- [  ]


---
элементы документа 

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение 
[*] - важное контекстное примечание 
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку 

---
краткое описание 

- [ interview questions for "trade republic" ] вопросы и ответы на английском






1) Assumed questions about the homework

[ common questions ]
  - 1 Какие страттегии болансировки нагрузки существуют?
    -
    -
  -...
    - 2 Какой дизайн системы мы можем назвать хорошим?
    -
    -
  -...
    - 3 Зачем нам стоит использовать system design patterns?
    -
    -
  -...
    - 4 Расскажи немного о популярных system design patterns?
        [ https://www.redhat.com/architect/14-software-architecture-patterns ]
      - `circuit breaker`:
        - The `circuit breaker` pattern minimizes the effects of a hazard 
          by rerouting traffic to another service. 
          While it helps make systems more fault tolerant to prevent accidents, 
          it also requires sophisticated testing 
          and using an infrastructure-management technology like service mesh.
      - `command query responsibility segregation (CQRS)`:
        - The `CQRS` pattern handles the situation where database queries happen 
          more often than the data changes. 
          It separates read and write activities to provide greater stability, 
          scalability, and performance, but it requires more database technologies 
          and therefore may increase costs.
      - `event sourcing `:
        - The `event sourcing` pattern is good for applications that use real-time data. 
          It sends a continuous stream of messages to a database, 
          web server, log, or another target. 
          It's very flexible but demands a highly efficient 
          and reliable network infrastructure to minimize latency.
      - `microservices`:
        - The `microservices` pattern combines design patterns to create multiple services 
          that work interdependently to create a larger application. 
          Because each application is small, it's easier to update them when needed, 
          but the complexity means you need greater architectural expertise 
          to make everything work correctly.
      - `pub-sub`:
        - The `pub-sub` pattern sends (publishes) relevant messages to places 
          that have subscribed to a topic. 
          It's easy to configure but more challenging to test 
          because interactions between the publisher and the subscriber are asynchoronous.
      - `saga`:
        - The `saga` pattern is used for transactions with multiple steps, 
          such as travel reservation services. 
          A `saga` includes the various steps that must happen for the transaction to complete. 
          This pattern enables transactions (ideally with five or fewer steps) 
          to happen in loosely coupled, message-driven environments, 
          but it requires a lot of programming and can be complex to manage. 
      - `sharding`:
        - The `sharding` pattern segments data in a database to speed commands or queries. 
          It ensures storage is consumed equally across instances 
          but demands a skilled and experienced database administrator 
          to manage `sharding` effectively.
      - `throttling`:
        - The `throttling` (or rate-limiting) pattern controls 
          how fast data flows into a target. 
          It's often used to prevent failure during a distributed denial 
          of service attack or to manage cloud infrastructure costs. 
          To use this pattern successfully, 
          you need good redundancy mechanisms in place, 
          and it's often used alongside the circuit breaker pattern 
          to maintain service performance.
  -...
  -...
  -...
[ System design questions ]
[https://www.interviewbit.com/system-design-interview-questions/#sharding-vs-partitioning]
  -...
  - 1 What is CAP theorem?    
    - CAP(Consistency-Availability-Partition Tolerance) 
      theorem says that a distributed system cannot guarantee C, A and P simultaneously. 
      It can at max provide any 2 of the 3 guarantees. 
      Let us understand this with the help of a distributed database system. 
    - guarantees:
      - Consistency: 
          This states that the data has to remain consistent 
          after the execution of an operation in the database. 
          For example, post database updation, 
          all queries should retrieve the same result.
      - Availability: 
          The databases cannot have downtime 
          and should be available and responsive always.
      - Partition Tolerance: 
          The database system should be functioning despite the communication 
          becoming unstable.
  -...
  - 2 How is Horizontal scaling different from Vertical scaling?
    - Horizontal scaling refers to the addition of more computing machines 
      to the network that shares the processing 
      and memory workload across a distributed network of devices. 
      In simple words, more instances of servers are added to the existing pool
      and the traffic load is distributed across these devices in an efficient manner.
    -...
    - Vertical scaling refers to the concept of upgrading the resource capacity 
      such as increasing RAM, adding efficient processors etc of a single machine 
      or switching to a new machine with more capacity. 
      The capability of the server can be enhanced without the need for code manipulation.
  -...
  - 3 What do you understand by load balancing? 
      Why is it important in system design?
    - When a server goes down, 
      the load balancer redirects traffic to the remaining available servers. 
      When a new server gets added to the configuration, 
      the requests are automatically redirected to it.
  -...
  - 4 What do you understand by Latency, throughput, and availability of a system?
    - Performance is an important factor in system design 
      as it helps in making our services fast and reliable. 
      Following are the three key metrics for measuring the performance:
      - Latency: 
        This is the time taken in milliseconds for delivering a single message.
      - Throughput: 
        This is the amount of data successfully transmitted through a system 
        in a given amount of time. It is measured in bits per second. 
      - Availability:
        This determines the amount of time a system 
        is available to respond to requests. 
        It is calculated: System Uptime / (System Uptime+Downtime).
  -...
  - 5 What is Sharding?
    - Sharding is a process of splitting the large logical dataset 
      into multiple databases. 
      It also refers to horizontal partitioning of data 
      as it will be stored on multiple machines. 
      By doing so, a sharded database becomes capable of handling more requests 
      than a single large machine.
  -...
  - 6 How is NoSQL database different from SQL databases?
    - Category 	          SQL	                           NoSQL
          
      Model	         Follows relational model. 	        Follows the non-relational model.
        
      Data       	   Deals with structured data. 	      Deals with semi-structured data.
      
      Flexibility 	 SQL follows a strict schema.   	  NoSQL deals with dynamic schema 
                                                        and is very flexible.
     
      Transactions	 Follows ACID                       Follows BASE 
                     (Atomicity, Consistency,           (Basic Availability, Soft-state, 
                     Isolation, Durability)             Eventual consistency) properties.
                     properties.	
  -...
  - 7 How is sharding different from partitioning?
    - Database Sharding:
      Sharding is a technique for dividing a single dataset among many databases, 
      allowing it to be stored across multiple workstations. 
      Larger datasets can be divided into smaller parts 
      and stored in numerous data nodes, 
      boosting the system’s total storage capacity. 
      A sharded database, similarly, can accommodate more requests 
      than a single system by dividing the data over numerous machines. 
      Sharding, also known as horizontal scaling or scale-out, 
      is a type of scaling in which more nodes are added to distribute the load. 
      Horizontal scaling provides near-limitless scalability 
      for handling large amounts of data and high-volume tasks.
    -...
    - Database Partitioning:
      Partitioning is the process of separating stored database objects 
      (tables, indexes, and views) into distinct portions. 
      Large database items are partitioned to improve controllability, 
      performance, and availability. 
      Partitioning can enhance performance when accessing partitioned tables 
      in specific instances. 
      Partitioning can act as a leading column in indexes, 
      reducing index size and increasing the likelihood 
      of finding the most desired indexes in memory. 
      When a large portion of one area is used in the resultset, 
      scanning that region is much faster than accessing data 
      scattered throughout the entire table by index. 
      Adding and deleting sections allows for large-scale data uploading 
      and deletion, which improves performance. 
      Data that are rarely used can be uploaded to more affordable data storage devices.
  -...
  - 8 How is performance and scalability related to each other?
    - A system is said to be scalable if there is increased performance 
      is proportional to the resources added. 
      Generally, performance increase in terms of scalability refers 
      to serving more work units. But this can also mean being able 
      to handle larger work units when datasets grow. 
      If there is a performance problem in the application, 
      then the system will be slow only for a single user. 
      But if there is a scalability problem, 
      then the system may be fast for a single user 
      but it can get slow under heavy user load on the application.
  -...
  - 9 What is Caching? 
      What are the various cache update strategies available in caching?
    - Caching refers to the process of storing file copies 
      in a temporary storage location called cache 
      which helps in accessing data more quickly thereby reducing site latency. 
      The cache can only store a limited amount of data. 
      Due to this, it is important to determine cache update strategies 
      that are best suited for the business requirements. 
      Following are the various caching strategies available:
      - `Cache-aside`:
        the application looks for an entry in the cache, 
        if the result is not found, then the entry is fetched 
        from the database and is added to the cache for further use. 
      -...
      - `Write-through`:
        In this strategy, the cache will be considered 
        as the main data store by the system and the system reads 
        and writes data into it. 
        The cache then updates the database accordingly 
        as shown in the database.
      -...
      - `Write-behind (write-back)`:
        Add or update an entry in the cache.
        Write the entry into the data store asynchronously 
        for improving the write performance.
      -...
      - `Refresh-ahead`:
        Using this strategy, we can configure the cache 
        to refresh the cache entry automatically before its expiration.
        This cache strategy results in reduced latency 
        if it can predict accurately what items are needed in future.
  -...
    - 10 What are the various Consistency patterns available in system design?
      - Consistency from the CAP theorem states 
        that every read request should get the most recently written data. 
        When there are multiple data copies available, 
        there arises a problem of synchronizing them so 
        that the clients get fresh data consistently. 
        Following are the consistency patterns available:
        - `Weak consistency`:
          After a data write, the read request may or may not be able 
          to get the new data. 
          This type of consistency works well in real-time use cases like VoIP, 
          video chat, real-time multiplayer games etc. 
          For example, when we are on a phone call, 
          if we lose network for a few seconds, 
          then we lose information about what was spoken during that time.
        - `Eventual consistency`: 
          Post data write, the reads will eventually see
          the latest data within milliseconds. 
          Here, the data is replicated asynchronously. 
          These are seen in DNS and email systems. 
          This works well in highly available systems.
        - `Strong consistency`:
          After a data write, the subsequent reads will see the latest data. 
          Here, the data is replicated synchronously. 
          This is seen in RDBMS and file systems 
          and are suitable in systems requiring transactions of data.
  -...
  - 11 What do you understand by Content delivery network?
    - Content delivery network or in short CDN 
      is a globally distributed proxy server network 
      that serves content from locations close by to the end-users. 
      Usually, in websites, static files like HTML, CSS, JS files, images 
      and videos are served from CDN.
      - Since users receive data from centres close to them 
        as shown in the image below, they don't have to wait for long.
      - Load on the servers is reduced significantly 
        as some of the responsibility is shared by CDNs.
  -...
  - 12 What do you understand by Leader Election?
    - In a distributed environment where there are multiple servers 
      contributing to the availability of the application, 
      there can be situations where only one server has to take lead 
      for updating third party APIs as different servers could cause problems 
      while using the third party APIs. 
      This server is called the primary server 
      and the process of choosing this server is called leader election. 
      The servers in the distributed environment have to detect 
      when the leader server has failed and appoint another one to become a leader. 
      This process is most suitable in high availability 
      and strong consistency based applications by using a consensus algorithm.
  -...
  - 13 How do you answer system design interview questions?
    - `Ask questions to the interviewer for clarification`:
      Since the questions are purposefully vague, 
      it is advised to ask relevant questions to the interviewer 
      to ensure that both you and the interviewer are on the same page. 
      Asking questions also shows that you care about the customer requirements.
    - `Gather the requirements`:
      List all the features that are required, 
      what are the common problems and system performance parameters 
      that are expected by the system to handle. 
      This step helps the interviewer to see how well you plan, 
      expect problems and come up with solutions to each of them. 
      Every choice matters while designing a system. 
      For every choice, at least one pros and cons of the system needs to be listed.
    - `Come up with a design`:
      Come up with a high-level design and low-level design solutions 
      for each of the requirements decided. 
      Discuss the pros and cons of the design. 
      Also, discuss how they are beneficial to the business.
  -...
  - 14 What are some of the design issues in distributed systems?
    - Following are some of the issues found in distributed systems:
      - `Heterogeneity`:
        The Internet allows applications to run 
        over a heterogeneous collection of computers and networks. 
        There would be different types of networks 
        and the differences are masked by the usage of standard Internet protocols 
        for communicating with each other. 
        This becomes an issue while designing distributed applications
      - `Openness`:
        Openness represents the measure by which a system can be extended 
        and re-implemented in different ways. 
        In distributed systems, it specifies the degree 
        to which new sharing services can be added 
        and made available for client usage.
      - `Security`:
        The information maintained in distributed systems 
        need to be secure as they are valuable to the users. 
        The confidentiality, availability 
        and integrity of the distributed systems have to be maintained 
        and this sometimes becomes a challenge.
      - `Scalability`:
        A system is scalable if it remains effective 
        when there is a significant increase in the request traffic 
        and resources. 
        Designing a distributed system involves planning well in advance 
        how well the system can be made scalable under varying user loads.
      - `Failure Handling`:
        In a distributed environment, the failures are partial, 
        meaning if some components fail, others would still function. 
        It becomes challenging to handle these failures 
        as it involves identifying right components where the failures occur.
  -...
  -...
  -...
[ Writer area questions ]
  - 1 Можем ли мы увеличить число сервисов "Writer"?
    - Да, можем.
      Надо поставить болансировщик нагрузки перед нашей группой сервисов с именем "Writer".
      Сообщения будут распределяться между копиями сервиса "Writer" и обрабатываться паралельно.
  
    - Можно подумать о написании микросервиса, 
      который будет принимать сообщения от "Friend-service" 
      и класть их в в топики kafka.
  
    - Для топиков kafka мы указываем число партиций.
      Число партиций важно для нас и определит сколько потребителей
      сможет параллельно читать сообщения из топика.
  -...
  - 2 Что делать с дублями записанными в DB, сервисом "Writer"?
    - Они нам не мешают, можем на них не обращать внимание.
  -...
  - 3 Какую базу данных выбрать для хранения "QuoteEventEntity"?
    - 

    -
  -...
  - 4 В какой момент к "Quote Event" мы прикрепляем значение времени?
    -

    -
  -...
  - 5 Зачем нам нужен компонент "Quote" и что это?
    -

    -
  -...
  - 6 Как мы можем масштабировать операции записи в BD?
    -

    -
  -...
  -...
  -...
[ Aggregator area questions ]
  - 1 Можем ли мы увеличить число сервисов "Aggregator"?
    -
    -
  -...
  -...
  -...
[ Cleaner area questions ]
  - 1 Можем ли мы увеличить число сервисов "Cleaner"?
    -
    -
  -...
  -...
  -...
[ Reader area questions ]
  - 1 Можем ли мы увеличить число сервисов "Reader"?
    -
    -
  -...
  - 2 Как мы можем использовать кеширование? 
    -
    -
  -...
  - 3 Как уменьшить нагрузку на базы данных? 
    -
    -
  -...
  -...
  -...








[?] nop
  - nop

 
 
// #c 
#----------------------------------------------- 

 

#----------------------------------------------- 
 
