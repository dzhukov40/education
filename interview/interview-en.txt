---
Ресурсы:

// оф сайт
- [ https://www.geeksforgeeks.org/java-interview-questions/ ]


---
элементы документа 

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение 
[*] - важное контекстное примечание 
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку 

---
краткое описание 

- [ interview ] вопросы и ответы на английском



10) Общие вопросы
  - [ MAIN ]:
    - как проходит код от разработки до продакшена
    - если бы у вас была безграничная власть чтобы вы поменяли в своей компании
  - [ ADDITION ]:
    - почему уходите с прошлого места что ждете от нового места?
    - как был построен процесс разработки


20) релевантный опыт
  - [ MAIN ]:
    - логирование
    - мониторинг
    - трассировка
    - докер, кубернетис helm 


30) Linux
  - [ common ]
    - [1] What are the most important Linux commands?
      - `ls`: Display directory contents such as folders and files.
        `mkdir`: Used to create a new directory.
        `pwd`: Shows the current directory.
        `top`: Display system running processes and resource usage.
        `grep`: Search a specific pattern in a file.
        `cat`: Through this command, users can add multiple files 
               and also display the content of the files.
        `tar`: Archives directories and files into a tarball.
        `wget`: Download files from the browser or web.
        `free`: Shows memory usage.
        `df`: Shows disk space usage.
        `man`: Gives a manual page for a specific command that displays instructions and details.
    -...
  - [ users ]
    - [1] What is a root account?
      - The root is like the user’s name or system administrator account in Linux. 
        The root account provides complete system control, which an ordinary user cannot do.
    -... 
  - [ chmod ]
    - [1] What is the chmod command in Linux, and how do you use it?
      - You can use the chmod command to change the file permissions of the directories. 
        It offers a simple way to control the read and write permissions. 
    -...
  - [ processors ]
    - [1] How do you list all the processes running in Linux?
      - You can list the currently running process in Linux through various commands 
        such as: `ps`, `top`, `htop`.
        This is a examle of finding running java process: `ps -aux | grep java`
    -...
  - [ strace ]
    - [1] What is strace command?
      - The strace command is the diagnostic utility by which you can trace 
        and monitor the system calls generated by the process. 
        It allows you to find how programs interact with Kernel 
        and can be used for debugging and troubleshooting.
    -...
  - [ ssh ] 
    - [1] What is the purpose of the SSH protocol in Linux?
      - The Secure Shell (SSH) is a protocol in Linux 
        which is used to establish a secure encrypted connection between a local 
        and remote machine. 
        It allows to securely access and manage remote servers. 
    -...
  - [ scp ] как скопировать файл
  - [ vim ] как отредактировать файл в консоле


40) Java
  - [ MAIN ]:
    - [ common ]
      - [1] What are the top Java Features?
        - Platform Independent: Java is platform independent means we can run the same program 
                                in any software and hardware and will get the same result.
          Object-Oriented: Java is an object-oriented language that supports the concepts of class, 
                           objects, four pillars of OOPS, etc.
          High Performance: faster than other traditional interpreted programming languages.
          Multithreaded: deal with multiple tasks at once by defining multiple threads.
      -...
      - [2] What is JRE?
        - JRE stands for Java Runtime Environment, 
          it is an installation package that provides an environment 
          to run the Java program or application on any machine.
      -...      
      - [3] What is JVM?
        - JVM stands for Java Virtual Machine it is a Java interpreter. 
          JVM is a part of JRE.
          It is responsible for loading, verifying, and executing the bytecode created in Java. 
      -...
      - [4] What is JIT?
        - JIT stands for (Just-in-Time) compiler is a part of JRE(Java Runtime Environment), 
          it is used for better performance of the Java applications during run-time
      -...
      - [5] What is a Class Variable?
        - In Java, a class variable (also known as a static variable) 
          is a variable that is declared within a class but outside of any method, constructor, or block. 
          Class variables are declared with the static keyword, 
          and they are shared by all instances (objects) of the class as well as by the class itself. 
          No matter how many objects are derived from a class, each class variable would only exist once.
      -...
      - [5] What is a Instance Variable?
        - A class variable without a static modifier known as an instance variable 
          is typically shared by all instances of the class. 
          These variables can have distinct values among several objects. 
          The contents of an instance variable are completely independent of one object instance 
          from another because they are related to a specific object instance of the class.
      -...
      - [6] What is covariant return type?
        - The covariant return type specifies 
          that the return type may vary in the same direction as the subclass. 
          It’s possible to have different return types for an overriding method in the child class, 
          but the child’s return type should be a subtype of the parent’s return type 
          and because of that overriding method becomes variant with respect to the return type.
      -...
    - [ class ]
      - [1] What is this keyword in Java?
        - ‘this’ is a keyword used to reference a variable that refers to the current object.
      -...
      - [2] What are Brief Access Specifiers and Types of Access Specifiers?
        - Access Specifiers in Java help 
          to restrict the scope of a class, constructor, variable, method, or data member. 
          There are four types of Access Specifiers in Java mentioned below:
          Public
          Private
          Protected
          Default
      -...
      - [3] What is the use of the final keyword? 
        - The final keyword is used to make functions non-virtual. By default, 
          all the functions are virtual so to make it non-virtual we use the final keyword.
      -...
    - [ Classloader ]
      - [1] What is the Java Classloader?
        - The Java Classloader is the part of the Java runtime environment 
          that loads classes on demand (lazy loading) into the JVM. 
      -...
    - [ String ]
      - [1] What is the difference between `String s = "Test"` and `String s = new String("Test")`? 
            Which is better and why?
        - In the case of `String s = "Test"`, 
          a String with the value `“Test”` will be created in the String pool. 
          If another String with the same value is then created (e.g., String s2 = "Test"), 
          it will reference this same object in the String pool.
      -...
    - [ Array ]
      - [1] What is an array in Java?
        - An Array in Java is a data structure 
          that is used to store a fixed-size sequence of elements of the same type. 
          Elements of an array can be accessed by their index, 
          which starts from 0 and goes up to a length of minus 1. 
          Array declaration in Java is done with the help of square brackets 
          and size is also specified during the declaration.  
      -...
      - [2] Is it possible to make an array volatile?
        - In Java, it is not possible to make a volatile. 
          Volatile keywords in Java can only be applied to individual variables 
          but not to arrays or collections.
      -...
      - [3] What are the advantages and disadvantages of an array?
        - (A) Direct and effective access to any element in the collection is made possible by arrays.
              An array’s elements can be accessed using an O(1) operation, 
              which means that the amount of time needed to do so is constant 
              and independent of the array’s size.
        - (B) Data can be stored effectively in memory using arrays. 
              The size of an array is known at compile time since its elements 
              are stored in contiguous memory regions.
        - (C) Due to the fact that the data is stored in contiguous memory areas, 
              arrays provide quick data retrieval.
        - (D) Arrays are easy to implement and understand, 
              making them an ideal choice for beginners learning computer programming.
      -...
    - [ Concurrency ]
      - [ ThreadLocal ]
        - [1] What is the "ThreadLocal" class?
              How and why would you use it?
          - A single "ThreadLocal" instance can store different values for each thread independently.
            Each thread that accesses the "get()" or "set()" method of a "ThreadLocal" instance is accessing its own, 
            independently initialized copy of the variable. 
        -...
        - [2] What is the "volatile" keyword? How and why would you use it?
          - The "volatile" keyword basically says to the JVM “Warning, 
            this variable may be modified in another Thread”. 
            Every thread accessing a volatile field will read the variable’s current value 
            instead of (potentially) using a cached value.
        -...
        - [3] What is multitasking?
          - Multitasking in Java refers to a program’s capacity to carry out several tasks at once. 
            Threads, which are quick operations contained within a single program, can do this. 
            Executing numerous things at once is known as multitasking.
        -...
        - [4] What are the two ways in which Thread can be created?
          - Multithreading is a Java feature 
            that allows concurrent execution of two or more parts of a program 
            for maximum utilization of the CPU. 
            - (1) By extending the Thread class.
                  We create a class that extends the java.lang.Thread class. 
                  This class overrides the run() method available in the Thread class. 
                  A thread begins its life inside run() method. 
            - (2) By implementing the Runnable interface.
                  We create a new class that implements java.lang.Runnable interface 
                  and override run() method. 
                  Then we instantiate a Thread object and call the start() method on this object.
        -...
        - [5] Differentiate between process and thread?
          -  
                `Process`                            `Thread`

  A process is a program in execution.          A thread is a single sequence of 
                                                instructions within a process.

The process takes more time to terminate.       The thread takes less time to terminate.

The process takes more                          The thread takes less time for context switching.
time for context switching.      
              
The process is less efficient in terms          Thread is more efficient in terms 
of communication.                               of communication.

The process is isolated.                        Threads share memory.

The process has its own                         Thread has Parents’ PCB, 
Process Control Block, Stack,                   its own Thread Control Block, 
and Address Space.                              and Stack and common Address space.

The process does not share                      Threads share data with each other.
data with each other.
        -...
    - [ Exception ]
      - [1] Is a "finally" block executed when an exception is thrown from a "try" block 
            that does not have a "catch" block, and if so, when?
        - A "finally" block is executed even if an exception is thrown 
          or propagated to the calling code block.
      -...
      - [2] What is Exception Handling?
        - An Exception is an Event that interrupts the normal flow of the program 
          and requires special processing. 
          During the execution of a program, 
          errors and unplanned occurrences can be dealt 
          with by using the Java Exception Handling mechanism. 
          Below are some reasons why Exceptions occur in Java:
          - Device failure
          - Loss of Network Connection
          - Code Errors
          - Opening an Unavailable file
          - Invalid User Input
          - Physical Limitations (out of disk memory)
      -...
      - [3] Explain the hierarchy of Java Exception classes.
        - 
                            `Throable`  
                                |
              |-----------------|-----------------| 
              |                                   |
          `Exceptions`                         `Error`
               |                                  |
               |---`Checked Exceptions`           |---`Virtual Machine Error`
               |                                  |
               |---`Unchecked Exceptions`         |---`Assertion Error  etc.`
      -...
      - [4] Explain Runtime Exceptions.
        - Runtime Exceptions are exceptions that occur during the execution of a code, 
          as opposed to compile-time exceptions that occur during compilation.
          Unlike checked exceptions, 
          runtime exceptions do not require a declaration in the throws clause 
          or capture in a try-catch block.
      -...
      - [5] What is the difference between Checked Exception and Unchecked Exception?
        - Checked Exception:
          Checked Exceptions are the exceptions that are checked during compile time of a program. 
          In a program, if some code within a method throws a checked exception, 
          then the method must either handle the exception 
          or must specify the exception using the throws keyword. 
          -...
          Checked exceptions are of two types: 
          - Fully checked exceptions: all its child classes are also checked,
            like IOException, and InterruptedException.
          - Partially checked exceptions: some of its child classes are unchecked, 
            like an Exception. 
        - Unchecked Exception:
          Unchecked are the exceptions that are not checked at compile time of a program.
          Exceptions under Error and RuntimeException classes are unchecked exceptions, 
          everything else under throwable is checked.  
      -...
      - [6] What is exception propagation?
        - Exception propagation is a process in which the exception is dropped 
          from to the top to the bottom of the stack. 
          If not caught once, the exception again drops down to the previous method, 
          and so on until it gets caught or until it reaches the very bottom of the call stack.
      -...
    - [ Enum ]
      - [1] Describe enums in Java.
        - Enums are essentially final classes with a fixed number of instances. 
          They can implement interfaces but cannot extend another class.
      -...
    - [ Reflection ]
      - [1] What is reflection? 
            Give an example of functionality that can only be implemented using reflection. 
        - Reflection allows programmatic access to information about a Java program’s types. 
          Commonly used information includes: 
          methods and fields available on a class, interfaces implemented by a class, 
          and the runtime-retained annotations on classes, fields and methods.
      -...
    - [ Collection ]
      - [ Common ] 
        - [1] Describe and compare fail-fast and fail-safe iterators. Give examples.
          - The main distinction between fail-fast and fail-safe iterators 
            is whether or not the collection can be modified while it is being iterated. 
            Fail-safe iterators allow this; 
            fail-fast iterators do not. 
            Fail-fast: ArrayList, HashSet, and HashMap.
            Fail-safe: ConcurrentHashMap or CopyOnWriteArrayList
        -... 
      - [ Map ]
        - [1] What is a Map interface in Java?
          - The map interface is present in the Java collection 
            and can be used with Java.util package. 
            A map interface is used for mapping values in the form of a key-value form. 
            The map contains all unique keys. 
            Also, it provides methods associated with it 
            like containsKey(), contains value (), etc. 
            There are multiple types of maps in the map interface as mentioned below:
            SortedMap
            TreeMap
            HashMap
            LinkedHashMap
        -...
      - [ HashSet ] 
        - [1] What is the HashSet class in Java and how does it store elements?
          - The HashSet class implements the Set interface in the Java Collections Framework 
            and is a member of the HashSet class. 
            Unlike duplicate values, it stores a collection of distinct elements. 
            In this implementation, 
            each element is mapped to an index in an array using a hash function, 
            and the index is used to quickly access the element. 
            It produces an index for the element in the array 
            where it is stored based on the input element. 
            Assuming the hash function distributes the elements among the buckets appropriately, 
            the HashSet class provides constant-time performance for basic operations 
            (add, remove, contain, and size).
        -...
        - [2] What is LinkedHashSet in Java Collections Framework?
          - The LinkedHashSet is an ordered version of Hashset 
            maintained by a doubly-linked List across all the elements. 
            It is very helpful when iteration order is needed. 
            During Iteration in LinkedHashSet, 
            elements are returned in the same order they are inserted.
        -...
      - [ HashMap ] какая может быть сложность получения обьекта
      - [ Set]
        - [1] If one needs a Set, how do you choose between HashSet vs. TreeSet?
          - If you need information about order, use 'TreeSet'; 
            for other cases, 'HashSet' is better.
        -...
        - [2] What is a marker interface?
          - An Interface is recognized as an empty interface (no field or methods) 
            it is called a marker interface. 
            Examples of marker interfaces are Serializable, Cloneable, and Remote interfaces. 
        -...
    - [ Interface ]
      - [1] What is an Interface?
        - An interface in Java is a collection of static final variables 
          and abstract methods that define the contract or agreement for a set of linked classes. 
          Any class that implements an interface is required to implement a specific set of methods. 
          It specifies the behavior that a class must exhibit 
          but not the specifics of how it should be implemented.
      -...
    - [ Garbage Collection ]
      - [1] Why Garbage Collection is necessary in Java?
        - For Java, Garbage collection is necessary to avoid memory leaks 
          which can cause the program to crash and become unstable. 
          There is no way to avoid garbage collection in Java. 
          Unlike C++, Garbage collection in Java helps programmers 
          to focus on the development of the application instead of managing memory resources 
          and worrying about memory leakage. 
          Java Virtual Machine (JVM) automatically manages the memory periodically 
          by running a garbage collector which frees up the unused memory in the application. 
          Garbage collection makes Java memory efficient 
          because it removes unreferenced objects from the heap memory.
      -...
      - [2] What is the drawback of Garbage Collection?
        - `1` The main drawback to Garbage collection is 
              that it can cause pauses in an application’s execution 
              as it works to clear the memory which slows down the performance of the application. 
          `2` The Process of Garbage collection is non-deterministic 
              which makes it difficult to predict when garbage collection occurs 
              which causes unpredictable behavior in applications. 
              For Example, if we write any program then it is hard for programmers to decide 
              if the issue is caused by garbage collection or by any other factors in the program. 
          `3` Garbage collection can also increase memory usage 
              if the program creates and discards a lot of short-lived objects.
      -...
      - [3] What is a memory leak, and how does it affect garbage collection?
        - In Java Memory leaks can be caused by a variety of factors, 
          such as not closing resources properly, 
          holding onto object references longer than necessary, 
          or creating too many objects unnecessarily. 
          There are situations in which garbage collector does not collect objects 
          because there is a reference to those objects. 
          In these situations where the application creates lots of objects 
          and does not use them and every object has some valid references, 
          a Garbage collector in Java cannot destroy the objects. 
          These useless objects which do not provide any value to the program 
          are known as Memory leaks. 
          Memory leaks can impact garbage collection negatively 
          by preventing the garbage collector from reclaiming unused memory. 
          This behavior will lead to slow performance or sometimes system failure. 
          In a program, it is important to avoid memory leaks by managing resources 
          and object references properly. 
      -...
    - приходилось ли профилировать приложения, поиск узких мест, поиск утечек памяти
    - [ Java 8 ] 
     - [ Optional ] зачем ввели 
     - [ default ] зачем ввели дефолтные методы в интерфейсы
     - [ functional ] что такое функциональный интерфейс ?
     - [ streamAPI ] 
       - есть лист из чисел Integer как получить лист чисел больше 10 как String.   
  - [ ADDITION ]
    - [ аннотации и интерфейсы ] маркерный интерфейс в чем разница с аннотацией
  - [ Security ]
    - [1] Why it be better to store passwords or other sensitive data in character array
          rather than in a String?
      - Strings in Java are immutable. 
        It means anyone who has access to memory could find this data.
    -...


41) OOPs
  - [ main ]:
    - [1] What are the main concepts of OOPs in Java?
      - The main concepts of OOPs in Java are mentioned below:
        Inheritance
        Polymorphism
        Abstraction
        Encapsulation
    -...
    - [2] What do you mean by data encapsulation?
      - Data Encapsulation is the concept of OOPS properties 
        and characteristics of the classes that The interface is binded together. 
        Basically, it bundles data and methods that operate on that data within a single unit. 
        Encapsulation is achieved by declaring the instance variables of a class as private, 
        which means they can only be accessed within the class. 
    -...
    - [3] What is Polymorphism?
      - Polymorphism is defined as the ability to take more than one form 
        It is of two types namely, 
        Compile time polymorphism or method overloading- a function called during compile time. 
        For instance, take a class ‘area’. Based on the number of parameters 
        it may calculate the area of a square, triangle, or circle. 
        Run time polymorphism or method overriding- links during run time.  
        The method inside a class overrides the method of the parent class.
    -...
    - [4] What is Abstraction?
      - Abstraction refers to the act of representing essential features 
        without including background details. 
        The detailed information or the implementation is hidden. 
        The most common example of abstraction is a car, we know how to turn on the engine, 
        accelerate and move, however, the way engine works, 
        and its internal components are complex logic hidden from the general users. 
        This is usually done to handle the complexity.
    -...



50) Spring
  - [ MAIN ]:
    - что такое спринг, зачем нужен, что из спринга использовали
    - [ scope ] скоупы бина в spring
    - [ @Serbice @Component @RestController @Bean ] как можно получить бин?
    - [ DI ] какие варианты есть инжектировать бин?
    - [ application.yaml ] какие варианты получения данных в коде    
    - [ profile ] как разделялись конфиги на дев прод и тд ?


60) Spring boot
  - [ MAIN ]:
    - зачем нам spring-boot
    - [ autoconfiguratio ] как работает ?


70) DВ
  - [ MAIN ]:
    - [ common ]
      - [1] What is JDBC?
        - JDBC standard API is used to link Java applications and relational databases. 
          It provides a collection of classes and interfaces 
          that let programmers to use the Java programming language 
          to communicate with the database. 
          The classes and interface of JDBC allow the application to send requests 
          which are made by users to the specified database. 
      -...
    - [ профилирование ] решать вопрос с медленным запросом
    - [ index ] 
    - маштобирование базы данных
    - [ ORM ] зачем нужна
    - [ наследование ] в Java усть наследование как это мапиться на реляционную БД
    - [ многие ко многим ] связь в бд?


80) Docker
  - [ MAIN ]:
    - [ ] что такое Docker
    - [ ] как ускоряли запуск java приложений 
    - [ Multistage build ]
    - [ docker-maven-plugin ] как собирали докер образ 
    - [ docker-compouse ] зачем нужен использовали ли


90) Kubernetes
  - [ MAIN ]:
    - [ deployment ] во что заворачивали java приложение
    - [ Daemonset ] в чем отличие демонсета от деплоймента
    - [ secrets ] как хранились
    - [ Ingress / Egress ] как трафик в кластер следует заводить и как заводить


100) CI / CD
  - [ MAIN ]: 
    - расскажите как код от разработчика попадает на прод
    - [ jobs ] приходилось ли писать джобы 
    - [ ] были ли анализаторы кода


110) безопасность
  - 


120) Git  
  -


130) Архитектура
  - построить систему hh



140) High load
  - [ MAIN ]: 
    - сколько запросов обрабатывала ваша система
    - как найти узкое место в приложении
    - летит куча маленьких сообщений как их обрабатывать
    - в чем отличия kafka от rabitMQ


150) Algoritms
  - [ ]






300) Behavioral Interview Questions
[help]
  [ https://www.indeed.com/career-advice/interviewing/behavioral-interview-questions ]
  Structure of answer:
    Situation: Describe a situation 
               in your work experience pertinent to the question.
    Task: Explain what your task was in that situation.
    Action: Detail the action you took to address the situation.
    Result: Summarize the outcome of your response.
-...
[questions]
  - [1] Give me an example of a time you had a conflict with a team member. 
        How did you handle it? 
    -
    -
  -...
  - [2] Tell me about a time you made a mistake at work. 
        How did you resolve the problem, 
        and what did you learn from your mistake?
    -
    -
  -...
  - [3] Describe an occasion when you had to manage your time to complete a task. 
        How did you do it?
    -
    -
  -...
  - [4] Describe an occasion when you failed at a task. 
        What did you learn from it?
    -
    -
  -...
  - [5] Tell me about a time you took the initiative in your career. 
        What was your motivation for doing so?
    -
    -
  -...  
  - [6] Describe a time when you used your leadership skills to motivate 
        your team or colleagues.  
    -
    -
  -...
  - [7] Describe a time when you were responsible for a task 
        you didn't receive training on and were unsure how to complete. 
        How did you handle it?
    -
    -
  -...
  - [8] Share an example of a career goal you had. 
        What steps did you take to achieve it?
    -
    -
  -...
  - [9] Give an example of a time when you had to make a difficult decision. 
        How did you handle it?
    -
    -
  -...
  - [10] Describe your process for solving problems. 
         What steps do you take to resolve important issues at work?
    -
    -
  -...










[?] nop
  - nop

 
 
// #c 
#----------------------------------------------- 

 

#----------------------------------------------- 
 
