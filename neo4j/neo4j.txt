---
Ресурсы:

// оф сайт
- [ https://neo4j.com/ ]


---
элементы документа 

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение 
[*] - важное контекстное примечание 
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку 

---
краткое описание 

- [ neo4j ] графовая система управления базами данных с открытым исходным кодом, 
реализованная на Java. 

 

1) устанавливаем
  - (*) [ https://neo4j.com/docs/operations-manual/current/installation/ ]
  - у нас должна быть установлена [ Java ]
  - [ sudo add-apt-repository -y ppa:openjdk-r/ppa ]
  - [ wget -O - https://debian.neo4j.org/neotechnology.gpg.key | sudo apt-key add - ]
  - [ echo 'deb https://debian.neo4j.org/repo stable/' | sudo tee -a /etc/apt/sources.list.d/neo4j.list ]
  - [ sudo apt update]
  - [ sudo apt install neo4j=1:3.5.11 -y ]
  - проверка [ neo4j --version ]


2) работа
  - конфигурационный файл [ /etc/neo4j/neo4j.conf ]
  - раскоментим строчку из конфига [ dbms.security.auth_enabled=false ]
  - запускаем: [ neo4j start ]
  - топаем в браузер [ http://localhost:7474/ ]
  - для запросов используется специальный язык [ Cypher Query Language ]
  - (*) [ cypher-shell ] утилита для работы в консоле с node4j
    - документация [ https://neo4j.com/docs/cypher-manual/current/ ]
    - [ :help ] справка по командам


3) как создать граф/отношение
  - (*) [ https://neo4j.com/docs/cypher-manual/current/clauses/create/ ]
  - [ CREATE ] - команда для создания узла или отношения между узлами
  - [
CREATE (
   <node_name>:<label_name>
   {
      <property_name_1>: "<property_value_1>",
      ... ,
      <property_name_n>: "<property_value_n>"
   }
); 
]
  - <node_name> — имя узла в текущем запросе (при поиске имя узла может быть другим)
  - <label_name> — метка этого узла
  - (*) Свойства представляют собой пару ключ-значение:
    - <property_name_*> — имя свойства
    - <property_value_*> — значение свойства
  - СОЗДАЕМ СВЯЗЬ:
    - [ CREATE (node1)-[:RelationshipType]->(node2); ]]
      - node1 - имя первого узла
      - node2 - имя второго узла
      - RelationshipType - метка для создаваемого отношения
  - (*) ПРИМЕРЫ:
    - создать узел 
      - [ CREATE (Person:person { name: "Ben" } ); ]    
    - создать узел и вернуть его назад [ RETURN ]
      - [ CREATE (a:Person {name:'Andres' }) RETURN a; ]
    - создаем два узла и связь между ними
      - [ CREATE (Person1:Person { name: "Alice" } ) RETURN Person1; ]
      - [ CREATE (Person2:Person { name: "Bob" } ) RETURN Person2; ]
      - [ MATCH (Person1:Person { name: "Alice" } ), (Person2:Person { name: "Bob" } ) 
          CREATE (Person1)-[:HAS_FRIEND]->(Person2) RETURN Person1, Person2;
        ]
    - найти узлы с метками [ Person ] c именами [ Alice и Bob] создать связь с [ duration ]
    - [ MATCH (a:Person),(b:Person) WHERE a.name = 'Alice' AND b.name ='Bob' 
        CREATE (b)-[r:HAS_FRIEND { duration: 6}]->(a);  
      ]
 

4) операция слияния [ MERGE ]
  - если выполнять одну и ту же команду создания, это породит кучу одинаковых узлов
    - [ CREATE (:Person {name: "Alice"}); ]
  - существует ли такой узел: если нет, то создаст его, иначе ничего не будет делать.
    - (*) тип и атрибуты с их значениями должны полностью соответствовать
    - [ MERGE (:Person {name: "Alice"}); ]
  - Можно использовать MERGE и для создания связей у существующих узлов
    - [ MATCH (a:Person {name: "Alice"}), (b:Person {name: "Katya"})
        MERGE (a)-[:Friendship]->(b)
        RETURN a, b;
      ]



5) поиск в графе
  - [ https://neo4j.com/docs/cypher-manual/current/syntax/patterns/ ]
  - общий шаблон [ MATCH <шаблон> RETURN <возвращаемые_значения>; ]
    - шаблон - определяем какие узлы мы ищем
    - возвращаемые_значения - указываем элементы, которые хотим вернуть
  - ПОИСК УЗЛОВ:
    - (*) переменная обернутая в круглые скобки соответствует всем узлам
    - [ MATCH (n) RETURN n; ] найти все узлы
    - [ MATCH (n:Person) RETURN n; ] найти все узлы с меткой [Person]
    - [ MATCH (n:Person {name: "Alice"}) RETURN n; ] с меткой [Person] и свойством
    - [ MATCH (n:Person) RETURN n.name; ] вывести определенные свойства
    - [ MATCH (n:Person) RETURN n LIMIT 25; ] ограничим результат
    - [ MATCH (n:Person) RETURN DISTINCT n.name; ] определить уникальные свойства
    - [ MATCH (n:Person) RETURN n.name, n.id ORDER BY n.name; ] сортировка
    - [ MATCH (n1:Person), (n2:Person) RETURN *; ] вывести все переменные из шаблона
  - ПОИСК СВЯЗЕЙ:
    - [ MATCH (n1)--(n2) RETURN n1, n2; ] найти все пары узлов между которыми есть связь
    - [ MATCH (n1)-->(n2) RETURN n1, n2;] только со связью в одну сторону
    - [ MATCH (n1)<--(n2) RETURN n1, n2;] только со связью в одну сторону
    - [ MATCH (n1)-[r]->(n2) RETURN n1, n2, r; ] ищем все связи
    - [ MATCH (n1)-[relationship]->(n2) RETURN n1, n2;]  ищем определенную связь
    - [ MATCH (n1)-[r:relationship]->(n2) RETURN n1, n2, r;] вывести связь
    - [ MATCH (n1)-[:Friendship {date: "1 Sep 2017"}]->(n2) RETURN n1, n2; ]
      - (*) у связей есть свойства, можем их использовать для поиска
    - [ MATCH (n)-->() RETURN n; ] найти все связанные узлы
    - [ ()-[r]->() ] найти все связи
    - [ MATCH ()-[r]->() RETURN DISTINCT type(r); ] узнать, какие метки у связей существуют
  - ПРИМЕНЕНИЕ [ WHERE ]:
    - [ AND, OR, XOR, NOT ] логические операторы
    - [  =, <>, <, >, <=, >= ] операторы сравнения
    - [ IS NULL, IS NO NULL ] есть работа с null полями
    - (*) есть поддержка регулярных выражений
    - (*) примеры:
      - [ MATCH (n:Person) WHERE n.age >= 21 AND n.age <= 35 RETURN n; ] 
      - [ MATCH (n) WHERE NOT (n)--() RETURN n; ] найти узлы без каких либо связей
      - [ MATCH (n),(n2) WHERE n.id = 0 AND (n)-->(n2) RETURN n, n2; ] все связвнные пары


6) изменения в графе
  - для удаления используется [ DELETE ]
    - (*) Удобно представлять [ DELETE ] как противоположную версию [ RETURN ]
  - [ DETACH ] - удалить узел вместе с зависимостями
  - ПРИМЕРЫ:
    - [ MATCH (n) DELETE n; ] удалить все узлы в базе (*) усл есть связи, не удалит
    - [ MATCH ()-[r]->() DELETE r; ] удалить все связи в базе
    - [ MATCH (n) DETACH DELETE n; ] удалить все узлы в базе (*) с зависимостями
  -...
  - изменение полей в графе [ REMOVE ]
    - [ MATCH (n:Person {name: "Borya"}) REMOVE n.age RETURN n; ] удалить поле [n.age]
    - [ MATCH (n:Person {name: "Borya"}) REMOVE n:Person; ] удалить метку
  -...
  - изменение полей в графе [ SET ]
    - (*) [ https://neo4j.com/docs/developer-manual/3.3/cypher/clauses/set/ ]
    - [ MATCH (n:Person {name: "Borya"}) SET n.name = "Boris"; ] изменить имя
    - если полей небыло то они добавятся, если есть изменятся
      - [ MATCH (n:Person {name: "Bоris"}) SET n.surname = "Yurinоv", n.alias = "thе Blаdе"; ]
    - (*) эти правила актуальны и для связей 


7) профилирование запросов
  - (*) [ https://neo4j.com/docs/developer-manual/3.4/cypher/execution-plans/ ]
  - [ EXPLAIN ]
    - перед запросом ставим [ EXPLAIN ] увидем план запроса, (*) запрос не выполнитчя
  - [ PROFILE ]
    - перед запросом ставим [ PROFILE ] и мы увидем план запроса, (*) запрос выполнитчя
    - (*) подсчитает, сколько строк прошло через операторы








[?] nop
  - nop

 
 
// #c 
#----------------------------------------------- 

 

#----------------------------------------------- 
 
