---
Ресурсы:

// оф сайт
- [ https://ru.wikipedia.org/wiki/SSH ]
 
// хорошая статья
- [ https://habrahabr.ru/post/331348/ ]

---
элементы документа 

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение 
[*] - важное контекстное примечание 
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку 

---
краткое описание 

- [ssh] это (Secure Shell) это протокол прикладного уровня.
- по умолчанию используется порт 22.



1) устанавливаем сервер и попробуем подключиться
  - надо установить сервер [ sudo apt install ssh ] - клиент есть по умолчанию
  - проверим что мы стали слушать пор 22 [ netstat -natp | grep 22 ]
  - подключаемся [ ssh {user}@{ip} ] 
  - генерируем пару ключей + добавляем пароль [ssh-keygen]
    - выбераем путь по умолчанию, не указывая другой путь.
  - удобная программа для добавления ssh ключа на сервер
    - запускаем ее на сервере с которого потом хотим подключаться
    - [ ssh-copy-id -i ~/.ssh/id_rsa.pub {user}@{ip} ]
  - [!] возможная ошибка при подключении [#sshError]
    - [*] решение, просто у нас поменялся ключик публичный
      на сервере к которому подключаемся, поэтому надо 
      удалить публичный ключ с сервера с которого конектимся
      - делаем при помощи утилитки
        [ ssh-keygen -R <target_ip> ]


2) как c зарегестрировать сгенерированный ключ
  - взяли [primary key] который сгенерили в Putty и положили в [.ssh] пользователя
    - [*] от этого пользователя потом и подключаемся
  - командой [add-ssh {файл primary key}] зарегали ключ у пользователя
  - [*] пробуем подключиться, возможно нужно перезагрузить сервис
    

3) запускаем приложение на удоленном сервере, а GUI на локальном
  - [ ssh -X dzhukov@95.213.229.207 -p 20622 ]


4) хотим сделать [ssh тунель] [*] это один из вариантов
  - [*] Local TCP forwarding
  - Опция -L позволяет локальные обращения (Local) направлять на удалённый сервер.
  - проверим на виртуалке
    - запускаем настроенную виртуалку
    - пингуем [ ping 192.168.56.11 ]
    - проверяем подключение [ ssh dzhukov@192.168.56.11 ]
  - фигачим [ ssh dzhukov@192.168.56.11 -N -L localhost:2000:213.180.204.3:80 ]
    - мы хотим чтобы наша виртуалка законектилась к [213.180.204.3:80]
      и это соединение было доступно нам при конекте на [localhost:2000]
    - [*] мы выбрали ip [213.180.204.3] не просто так, это один из серверов [ya.ru]
      узнали его через [ping ya.ru]
    - теперь идем в браузер и фигачим [localhost:2000] 
      - УРААА все пашет через тот порт
  - фигачим второй пример [ ssh dzhukov@192.168.56.11 -N -L localhost:2000:localhost:8080 ]
    - у нас на виртуалке [192.168.56.11] запущен сервер [tomcat], 
      хотим к нему подключиться, помни что тут второй [localhost] это уже 
      относительно виртуалки.


4) хотим сделать [ssh тунель] [*] это один из вариантов
  - [*] Local TCP forwarding
  - Опция -L позволяет локальные обращения (Local) направлять на удалённый сервер.
  - проверим на виртуалке
    - запускаем настроенную виртуалку
    - пингуем [ ping 192.168.56.11 ]
    - проверяем подключение [ ssh dzhukov@192.168.56.11 ]
  - фигачим [ ssh dzhukov@192.168.56.11 -N -L localhost:2000:213.180.204.3:80 ]
    - мы хотим чтобы наша виртуалка законектилась к [213.180.204.3:80]
      и это соединение было доступно нам при конекте на [localhost:2000]
    - [*] мы выбрали ip [213.180.204.3] не просто так, это один из серверов [ya.ru]
      узнали его через [ping ya.ru]
    - теперь идем в браузер и фигачим [localhost:2000] 
      - УРААА все пашет через тот порт
  - фигачим второй пример [ ssh dzhukov@192.168.56.11 -N -L localhost:2000:localhost:8080 ]
    - у нас на виртуалке [192.168.56.11] запущен сервер [tomcat], 
      хотим к нему подключиться, помни что тут второй [localhost] это уже 
      относительно виртуалки.


5) хотим сделать [ssh тунель] [*] это один из вариантов
  - [*] Remote TCP forwarding
  - Опция -R позволяет перенаправлять с удалённого (Remote) сервера порт на свой (локальный).
  - проверим на виртуалке
    - запускаем настроенную виртуалку
    - пингуем [ ping 192.168.56.11 ]
    - проверяем подключение [ ssh dzhukov@192.168.56.11 ]
  - фигачим [ ssh dzhukov@192.168.56.11 -R localhost:80:213.180.204.3:2000 ]
    - [!] ... не дотестировано 

6) копирование файлов по  ssh
  - получить файл с сервера
    - [ scp -P порт  логин@адрес_сервера:путь_откуда  путь_куда ]
  - отправить файл на сервер
    - [ scp -P порт  путь_откуда  логин@адрес_сервера:путь_куда ]





[?] nop
  - nop

 
 
// #sshError 
#----------------------------------------------- 

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the ECDSA key sent by the remote host is
SHA256:ErKiS9uBdepxGVLB0eQ1GzX2c3HC81w1+5lei6SkbEQ.
Please contact your system administrator.
Add correct host key in /home/dzhukov/.ssh/known_hosts to get rid of this message.
Offending ECDSA key in /home/dzhukov/.ssh/known_hosts:2
  remove with:
  ssh-keygen -f "/home/dzhukov/.ssh/known_hosts" -R 192.168.56.11
ECDSA host key for 192.168.56.11 has changed and you have requested strict checking.
Host key verification failed.

#----------------------------------------------- 
 