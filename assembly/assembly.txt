---
Ресурсы:

// оф сайт
- [  ]
 


---
элементы документа 

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение 
[*] - важное контекстное примечание 
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку 

---
краткое описание 

- [ assembly ] машинно-ориентированный язык программирования низкого уровня.


 

1) установка IDE
  - [ http://dman95.github.io/SASM/ ] качаем 
  - качаем файл [ sasm_3.10.1_amd64.deb ] 
    - [ sudo apt install ./sasm_3.10.1_amd64.deb -y ] устанавливаем 
  - [ sasm ] запускаем
  - Заходим в окне программы в Settings. Там - ставим 64 битный GAS.
  - Создаём новый проект. Всё обрамление кода создастся автоматически.
  -  (*) пишем саой код
  - Запускаем это дело с помощью "Build and run" в верхней панели.
  - Если хотим пошаговый дебаг, то жмём F5 - произойдёт запуск с дебагом.

2) инструкции
- [ mov ] копирование
  - [ movq <src>, <dst> ] копирование байта
    - примеры
      - [ movq %RAX, %RBX ] копирование из регистра в регистр
      - [ movq (%RAX), %RBX ] (*) скобочки это разыменование
      - [ movq $42, %RBX ] положить константу в регистр
      - [ movq 42, %RBX ] (*) не указав $ будет разыменование
...
- [ add ] сложение (прибавление)
  - (*) результат будет во втором аргументе
  - [ addq <src>, <dst> ] прибавление байта
    - примеры
      - [ addq %RAX, %RBX ] прибавляем к RBX байт из RAX
      - [ addq $42, %RBX ] прибавляем к RBX число 42
...
- [ sub ] вычитание
  - (*) результат будет во втором аргументе
  - [ sub <src>, <dst> ] вычитание байта
    - примеры
      - [ sub %RAX, %RBX ] вычитаем из RBX байт из RAX
      - [ sub $42, %RBX ] вычитаем из RBX число 42
...
- [ incq ] инкремент
  - [ incq <op> ] увеличить на единицу
    - примеры
      - [ incq %RAX ] инкрементируем число в регистре
...
- [ decq ] декремент
  - [ decq <op> ] уменьшить на единицу
    - примеры
      - [ decq %RAX ] декрементируем число в регистре
...
- [ mulq ] беззнаковое умножение
  - (*) число из регистра %RAX умножить на аргумент
  - (*) результат: %RAX и %RDX
  - [ mulq <op> ] число из регистра %RAX умножить на аргумент
    - примеры
      - [ mulq %RAX ] умножить на число из регистра %RAX
...
- [ div ] деление
  - (*) число из регистра %RAX поделить на аргумент
  - (*) результат: %RAX (часное) и %RDX (остаток от деления)
  - [ divq <op> ] число из регистра %RAX поделить на <op>
    - примеры
      - [ divq %RСX ] поделить число из %RСX на число из регистра %RAX





[?] nop
  - nop

 
 
// #c 
#----------------------------------------------- 

 

#----------------------------------------------- 
 
