---
Ресурсы:

// оф сайт
- [ https://www.mongodb.com/ ]
- [ https://jsman.ru/mongo-book/index.html ]



---
элементы документа 

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение 
[*] - важное контекстное примечание 
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку 

---
краткое описание 

- [ MongoDB ] документоориентированная система управления базами данных (СУБД) 
с открытым исходным кодом, не требующая описания схемы таблиц. 
Классифицирована как NoSQL, использует JSON-подобные документы и схему базы данных. 
Написана на языке C++.

 

1) устанавливаем [ https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/ ]
  - [ wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add - ]
  - [ echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list ]
  - [ sudo apt-get update ]
  - [ sudo apt-get install -y mongodb-org ]
  - [
echo "mongodb-org hold" | sudo dpkg --set-selections
echo "mongodb-org-server hold" | sudo dpkg --set-selections
echo "mongodb-org-shell hold" | sudo dpkg --set-selections
echo "mongodb-org-mongos hold" | sudo dpkg --set-selections
echo "mongodb-org-tools hold" | sudo dpkg --set-selections
  ]


2) настройка
  - работа memcached задается через файл [ /etc/mongod.conf ]
  - файл логов [ /var/log/mongodb ]
  - стартуем сервис [ sudo service mongod start ]
    - (*) порт по умолчанию [ 27017 ]
  - чтобы подключиться к запущенному инстансу пишем [ mongo ]
  

3) команды помошники [ https://docs.mongodb.com/manual/reference/mongo-shell/ ]
  - подключаемся через консольный клиент [ mongo ]
  - КОМАНДЫ ПОМОШНИКИ:
    - смотрим список баз данных [ show dbs ]
    - подключаемся к базе [ use <имя базы> ]
    - посмотреть список коллекций [ db.getCollectionNames() ]
    - посмотреть информацию о коллекциях [ db.getCollectionInfos() ] 
  

4) команды поиска 
  - поиск [ db.collection_name.find({запрос}, {оператор проекции}) ]
    - collection_name - имя коллекции
    - запрос - определяем какие документы ищем
    - оператор проекции - определяем что хотим видеть в результате
      - состоит из пар "название поля: флаг отображен (1 — отображать, 0 — не отображать).
  - (*) ПРИМЕРЫ:
    - Найти все документы в коллекции
      - [ db.collection_name.find() ]
    - оператор AND
      - [ db.collection_name.find({name:"Ivan", email: "ivan@example.com"}) ]
    - оператор OR 
      - [ db.collection_name.find({$or: [{name: "Ivan"}, {email: "ivan@example.com"}]}) ]  
    - оператор IN 
      - [ db.collection_name.find({name: {$in : ["Ivan", "Petr"]}}) ]
    - найти документы у которых есть такое поле 
      - [ db.collection_name.find({name: {$exists : true}}) ]
  

5) как ограничить число результатов
  - [ skip ] пропустив N элементов
  - [ limit ] задать максимальное количество выводимых результатов 
  - (*) пример: вывести только шестой и седьмой документы 
    - [ db.collection_name.find().skip(5).limit(2) ]


6) как отсортировань результат
  - [ sort ] операциея сортировки
  - (*) пример:
    - [ db.collection_name.find().sort({<field1>: <order>, <field2>: <order>}) ]
      - [ fieldN ] — это название поля
      - [ order ] — порядок сортировки (1 — по возрастанию, -1 — по убыванию). 


7) как посчитать количество результатов запроса
  - [ count ] оператор подсчета документов в результате
  - (*) пример
    - [ db.collection_name.find({...}).count() ]


8) команды вставки
  - вставка [ db.collection_name.insert() лучше не использовать]
    - для вставки используем один из этих методов:
      - [ db.collection_name.insertOne(<document>, {writeConcern: <document>}) ]
      - [ db.collection_name.insertMany([ <document 1> ... ], {writeConcern: <document>, ordered: <boolean}) ]
      - (*) если не указать явно [ _id ], то он сгенерируется автоматически
        - collection_name - имя коллекции
        - document - вставляемый документ 
        - writeConcern - политика распространения изменений на другие узлы
        - ordered - булевский флаг, определяет упорядочить изменения или нет
  - (*) ПРИМЕРЫ:
    - вставить один документ
      - [ db.collection_name.insertOne({field1: "val1", field2: "val2"}) ]
    - вставить несколько документов
      - [ db.collection_name.insertMany([{_id: "doc1",field1: "val1"}, {_id: "doc2", field2: "val2"}]) ]


8) команды обновления
  - вставка [ db.collection_name.update() лучше не использовать]
    - для вставки обновления один из этих методов:
      - [ db.collection_name.updateOne({запрос}, {update-операторы}, 
          { upsert: <boolean>, multi: <boolean>, writeConcern: <document>, collation: <document>}) ]
      - [ db.collection_name.updateMany({запрос}, {update-операторы}, 
          { upsert: <boolean>, multi: <boolean>, writeConcern: <document>, collation: <document>}) ]
    - запрос — условие для поиска удаляемых документов
    - update-операторы — документ, описывающий вносимые изменения
      - (*) [ https://docs.mongodb.com/manual/reference/operator/update/ ]
      - $set
      - $unset
      - $inc 
      - $rename
    - upsert — создавать ли новый документ, если ни один из существующих не подходит под запрос
    - multi — применять ли изменения ко всем документам, подходящим под запрос, или к первому найденному
    - writeConcern — политика распространения изменений на другие узлы
    - collation — специфические для отдельных локалей параметры обработки строк
  - (*) ПРИМЕРЫ:
    - обновим документ у которого _id = 123, изменяем поле location
      - [ db.collection_name.updateOne({_id: "123"}, {$set: {location: "Berlin"}}) ]


8) команды удаления
  - удаление [ db.collection_name.remove({запрос}, 
    {justOne: <boolean>, writeConcern: <document>, collation: <document> }) ]
    - запрос — условие для поиска удаляемых документов
    - justOne — удалять ли все документы, или только первый
    - writeConcern — определяет политику распространения изменений на другие узлы
    - collation — определяет специфические для отдельных локалей параметры обработки строк
  - (*) ПРИМЕРЫ:
    - удалить все записи по условию
      - [ db.collection_name.remove({field1: "a", field2: "b"}) ]
    - удалить только первую запись по условию
      - [ db.collection_name.remove({field1: "a", field2: "b"}, {justOne: true}) ]


9) как посмотреть размер данных в коллекции
  - посмотреть характеристики базы данных [ db.stats() ]


10) как импортировать данные 
  - ИМПОРТ:
  - [ mongoimport --db <database> --collection <collection> --file <filename> <--mode> ]
    --file <filename> - расположение и имя файла, содержащего данные для импорта.
    --db <database>, -d <database> - название базы данных, в которую будет производиться импорт.
    --collection <collection>, -c <collection> - название коллекции, в которую будет производиться импорт.
      - (*) Если вы не указали --collection, возьмет названия коллекции название файла входных данных.
    --type <json|csv|tsv> - По умолчанию формат файла указан как JSON
    --mode - стратегия импорта данных в базу данных
      - (*) по умолчанию применяется стратегия [ insert ]
      - [ insert ] вставка новых документов в базу данных. Если документ уже есть будет ошибка
      - [ upsert ] замена документов. Документ заменится на тот что мы импортируем
      - [ merge ] слияние документов. Результирующий документ будет содержать старые и новые поля








[?] nop
  - nop

 
 
// #c 
#----------------------------------------------- 

 

#----------------------------------------------- 
 
