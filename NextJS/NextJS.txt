---
Ресурсы:

// оф сайт
- [ https://nextjs.org/ ]
- [ https://www.youtube.com/watch?v=cAvIwaucvQM&list=PL0lO_mIqDDFXAbfgj6lcK8cRu6yFdQgnR&index=1]
- [https://jsonplaceholder.typicode.com/] предоставляет фейковые данные для тестирования


---
элементы документа 

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение 
[*] - важное контекстное примечание 
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку 

---
краткое описание 

- [ nextjs ] это React фреймворк для более удобного создания UI,
  чем просто на React.



0) учебнык материалы
  - курс на ютуб: https://www.youtube.com/watch?v=cAvIwaucvQM&list=PL0lO_mIqDDFXAbfgj6lcK8cRu6yFdQgnR
    - (*) папка: "youtube-_gosha_dudar_nextjs"
  - курс на ютуб: https://www.youtube.com/watch?v=kVddMV-TrSw&list=PLC3y8-rFHvwjOKd6gdf4QtV1uYNiQnruI&index=2
    - (*) папка: "youtube-codevolution-nextjs" 


1) устанавливаем  
  - [ https://nextjs.org/docs/getting-started/installation ]
  - перед установкой устанавливваем [ nodejs ]
  - потом выполняем команду для создания базовой структуры
    - [ npx create-next-app@latest ]


1a) устанавливаем плагины для visual code
  - [ Nextjs snippets ]    
  - [ ESLinter ] 
  - [ Prettier — Code Formatter ]
  - [ Node.js Modules Intellisense ]
  

2) структура проекта
  - D_[ app ]
    - тут создаем иерархию папок, и каждая папка определяет url
      тоесть мы в браузере указываем через  / адрес как имена папок
      и таким образом ходим по разным страницам
    - в каждой папке создаем ts файлы для описания, что показывать на странице
    - "page.tsx or page.js" 
      - main file for visualise our page
      - we can see this file as "index.html"
    - "global.css"
      - global styles
    - "layout.tsx / layout.js" 
      - common template for pages
      - usefull if we need some common code in all pages
  - D_[ node_modules ]
    - javaScript libraries
    - we don't push them to VCS(git) 
    - run for getting this modules "npm install" 
  - D_[ out ]
    - this folder by default will be created 
      for containing static version of site for deploy.
    - (*) static version of site not will created by default
  - D_[ public ]
    - folder to store static assets such as images, fonts, etc.
  - F_[ .eslintrc.json ]
    - linter configuration
  - F_[ .gitignore ]
    - file for ignore files from VCS(git)
  - F_[ next.config.js ]
  - F_[ next-env.d.ts ]
  - F_[ package.json ]
    - main "npm" file for set libraries(modules) 
    - we define comands in "script" section in this file
  - F_[ package-lock.json ]
  - F_[ postcss.config.js ]
  - F_[ tailwind.config.js ]
  - F_[ tsconfig.json ]
    - TypeScript configuration


3) Запуск внутреннего сервера
  - [ npm run dev ]
    - эта команда описана в F_[ package.json ] запустит ( next dev )
    - теперь идем на [ http://localhost:3000 ]
    - редактируем проект и мгновенно видим результат
  - лучше использовать "yarn"
    - [ yarn dev ]


4) Какой выбрать стек
  - смотрел разные дизайны
    - много кто использует bootstrap, но оно уже не выглядет вкусно
      - [ https://getbootstrap.com/ ]
    - круче выглядит материал дизайн от гугла
      - [ https://mui.com/ ]
  - Для эксперементов выбрал шаблон 
    - [ https://demos.adminmart.com/free/nextjs/modernize-nextjs-free/landingpage/index.html ]


5) Создаем еще одну страницу
  - идем в папку "app" и создаем папку "client"
    - имя папки будем использоваться как url
  - в папке "app/client" создаем "page.tsx"
    - текст файла:
      - [
           export default function Client() {
             return (
               <h1>Client page</h1>
             );
          } 
        ]
  - теперь можем проверить перейдя на "http://localhost:3000/client"


6) Создаем вложенную страницу
  - идем в папку "app/client" и создаем папку "show"
    - имя папки будем использоваться как url
  - в папке "app/client/show" создаем "page.tsx"
    - текст файла:
      - [
           export default function Show() {
             return (
               <h1>Show page</h1>
             );
          } 
        ]
  - теперь можем проверить перейдя на "http://localhost:3000/client/show"


6) Создаем динамическую страницу 
  - идем в папку "app/client" и создаем папку "[clientId]"
    - имя папки будем использоваться как url
    - (*) clientId - будет параметв который мы сможем получить
  - в папке "app/client/show" создаем "page.tsx"
    - текст файла:
      - [
          export default function ClientId({ params }: { params: { clientId: string } }) {
            return (
              <div>
                  <h1>ClientId page</h1>
                  <p>{params.clientId}</p>
              </div>
            );
          }
        ]
  - теперь можем проверить перейдя на "http://localhost:3000/client/34565346"
  - должны увидеть
    [
      ClientId page
      34565346
    ]


7) указываем общии стили для всех страниц
  - удалим все из файла "globals.css"
  - запишим туда
    [
      * {
        margin: 0;
        padding: 0;
      }
      
      
      body {
        background: #222;
        color: #fff;
      }      
    ]
  - файл подключатся в файле "layout.tsx"



7) создаем локальные стили
  - cоздаем файл все из файла "app/client/show/show.css"
  - (*) файл может иметь любое название
  - запишим туда
    [
      body {
        background: #fff;
        color: #000;
      }
    ]
  -...
  - создаем файл "layout.tsx"
  - запишем туда
    [
      import type { Metadata } from "next";
      import { Inter } from "next/font/google";
      import "./show.css";
      
      const inter = Inter({ subsets: ["latin"] });
      
      export const metadata: Metadata = {
        title: "Show page",
        description: "Generated by create next app",
      };
      
      export default function RootLayout({
        children,
      }: Readonly<{
        children: React.ReactNode;
      }>) {
        return (
          <html lang="en">
            <body className={inter.className}>{children}</body>
          </html>
        );
      }
    ]
  

7) создаем ссылки на страницы
  - есть специальный класс "Link"
  - поместим ссылку на главную страницу на странице "/client/show"
  - текст в файле:
    [
      import Link from "next/link";
      
      export default function Show() {
        return (
          <div>
            <h1>Show page</h1>
            <Link href="/">Main page</Link>
          </div>
      
        );
      }
    ]
  - теперь можем проверить перейдя на "http://localhost:3000/client/show"


7) создаем компонент
  - создаем папуку "app/components"
  - создаем файл "app/components/Header.tsx"
  - текст 
    [
      import Link from "next/link"
      
      const Header = () => {
          return(
              <header>
                <span>Header</span>
                <nav>
                  <Link href="/">Home</Link>
                </nav>
              </header>
       
          )
}

export default Header
    ]
  -...
  - теперь используем этот компонент.
  - идем в "app/layout" и добавляем импорт компанента и используем его
    [
      import type { Metadata } from "next";
      import { Inter } from "next/font/google";
      import Header from "./components/Header";
      import "./globals.css";
      
      const inter = Inter({ subsets: ["latin"] });
      
      export const metadata: Metadata = {
        title: "Create Next App",
        description: "Generated by create next app",
      };
      
      export default function RootLayout({
        children,
      }: Readonly<{
        children: React.ReactNode;
      }>) {
        return (
          <html lang="en">
            <body className={inter.className}>
              <Header></Header>
              {children}
            </body>
          </html>
        );
      }
    ]


7) создаем ф-ию для получения данных с сервера
  - используем функцию "fetch" чтобы сделать запрос
  - пример:
    [
      import Link from "next/link";
      
      async function fetchData() {
        const res = await fetch('https://jsonplaceholder.typicode.com/posts');
        const result = await res.json();
        return result;
      }
      
      
      export default async function Home() {
        const posts = await fetchData();
      
        return (
          <div>
            <h1>Main page</h1>
            {posts.map((el: { id: number, title: string, body: string; }) => (
              <div key = {el.id} className="post">
                <h2>{el.title}</h2>
                <p>{el.body}</p>
                <Link href={`/post/` + el.id}>Детальнее</Link> 
              </div>
            ))}
          </div>
        );
      }
    ]
  -...
  - еще добавим стили для этих постов в "global.css"
    [
      /* styles for posts */
      .post {
        width: 500px;
        margin-top: 50px;
        padding: 20px;
        border-radius: 5px;
        background: #598191;
        color: #000;
      }
      
      .post h2 {
        margin-bottom: 20px;
      }
      
      .post p {
        margin-bottom: 20px;
      }
      
      .post a {
        color: #283c44;
      }
    ]


7) создаем динамические страницы
  - создаем папку "app/post/[id]"
  - создаем файл "app/post/[id]/pages.tsx"
  - текст:
    [
      import Link from "next/link";
      
      
      async function fetchData(id: number) {
        const res = await fetch('https://jsonplaceholder.typicode.com/posts/' + id);
        const result = await res.json();
        return result;
      }
      
      
      const Post = async ({ params }: { params: { id: number } }) => {
        const post = await fetchData(params.id);
          return (
            <div>
              <Link href="/">Назад</Link><br />
              <h2>{post.title}</h2>
              <p>{post.body}</p>
              <strong>Avtor ID: {post.id}</strong>
            </div>
          )
      }
      
      export default Post
    ]



8) создаем еще один компонент для примера
  - создаем файл "/app/components/Post.tsx"
  - текст:
    [
      import Link from "next/link"
      
      const Post = (post : { id: number, title: string, body: string }) => {
          return (
              <div>
                <Link href="/">Назад</Link><br />
                <h2>{post.title}</h2>
                <p>{post.body}</p>
                <strong>Avtor ID: {post.id}</strong>
              </div>
            )
      }
      
      export default Post
    ]
  -...
  - теперь используем этот компонент
  - поправим файл "app/post/[id]/pages.tsx"
    [
      import Post from "@/app/components/Post";
      
      async function fetchData(id: number) {
        const res = await fetch('https://jsonplaceholder.typicode.com/posts/' + id);
        const result = await res.json();
        return result;
      }
      
      
      const PagePost = async ({ params }: { params: { id: number } }) => {
        const currentPost = await fetchData(params.id);
         
          return (
            <Post id={currentPost.id} title={currentPost.title} body={currentPost.body} />
          )
      }
      
      export default PagePost
    ]



9) создаем backend для тестирования front-end
  - создаем папку "api"
    - каждая новая папка в "api" будет отвечвть за отслеживания нового адресса
  - создаем папку "api/data"  
  - создаем файл "api/data/route.tsx"
  - текст:
    [
      export async function GET(request:any) {
          const data = {
              name: 'Bob',
              age: 10,
              bio: 'Some info'
          }
      
          return new Response(JSON.stringify(data));
      }
      
      export async function POST(request:any) {
          return new Response(request.body);
      }
          ]
  -...
  - проверяем: "http://localhost:3000/api/data" (*) POST/GET
  


10) собираем проект (для деплоя)
  - добавим параметр конфигурации в файле "next.config.mjs"
  - (*) пришлось понизить версию "next.js"
  - текст:
    [
      /** @type {import('next').NextConfig} */
      const nextConfig = {
          output: 'export'
      };
      
      export default nextConfig;    
    ]



11) Заворачиваем фронт в Docker
  - документация: https://nextjs.org/docs/app/building-your-application/deploying#docker-image
  - скопировали Dockerfile
  - поправили файл: "next.config.mjs"
    [
      /** @type {import('next').NextConfig} */
      const nextConfig = {
          output: 'standalone'
      };
      
      export default nextConfig;
    ]
  -...
  - поправили файл: "package.json"
    [
     ...
     ...
       "workspaces": {
         "nohoist": [
           "**/frontend",
           "**/frontend/**"
         ],
         "packages": [
           "api",
           "frontend"
         ]
       }     
     ...
     ...
    ]
  -...
  - запускаем команды
    - [ docker build -t nextjs-docker . ]
    - [ docker run -p 3050:3000 nextjs-docker ]
    - проверяем: [ http://localhost:3050 ]


12) сделаем вложенный динамический route
  - создаем папки "app/products/[productId]/reviews/[reviewId]"
  - создаем файл "app/products/[productId]/reviews/[reviewId]/pages.tsx"
  - текст:
    [
      export default function RewiewDetail(
        { params } : { 
          params: { 
            productId : string,
            reviewId : string 
          } 
        }
      ) {
        return <h1>Review {params.reviewId} for product {params.productId}</h1>;
      }
    ]


13 (catch-all Segments)
  - создвем папку "app/docs/[...slug]" (*) docs - зарезервированое имя папки
    - "slug" - нами выбранное имя
  - создаем файл "app/docs/[...slug]/page.tsx"
  - текст:
    [
      export default function Docs(
        { params } : {
          params: {
            slug: string[]
          }
        }
      ) {
        if (params.slug.length === 2) {
          return (
            <h1>
              Viewing docs for feature {params.slug[0]} and concept {params.slug[1]}
            </h1>
          )
        } else if (params.slug.length === 1) {
            return <h1>Viewing docs for feature {params.slug[0]}</h1>
        }
      
        return <h1>Home page</h1>
      }
    ]
  -...
  - проверяем: 
    - "http://localhost:3000/docs/routing"
    - "http://localhost:3000/docs/routing/catch-all-sigments"



14) добавляем кастомный 404-not found page
  - создаем файл "app/not-found.tsx"
  - текст:
    [
      export default function NotFound() {
          return (
              <div>
                  <h2>Page not found</h2>
                  <p>Could not find requested resource</p>
              </div>
          )
      }
    ]
  -...
  - проверяем: "http://localhost:3000/tort"
  

15) делаем папки которые не буду роутерами
  - для этого надо начать имя папки с "_"
  - создадим "app/_private"
  -...
  - проверяем: "http://localhost:3000/_private"


16) роутинг для групп
  - создавая папку с "()" мы групируем роуты 
    но это имя не будет использоваться как путь до страниц!
  -... 
  - создаем папку "app/(auth)"
  - создаем папку "app/(auth)/forgot-password"
  - создаем папку "app/(auth)/login"
  - создаем папку "app/(auth)/register"
  - создаем "page.tsx" в папках 
  -...
  - проверяем: 
    - "http://localhost:3000/auth/login"
    - "http://localhost:3000/login"


17) layout.tsx пример
  - layout.tsx используется для оборачивания
  - мы как матрешку собераем ответ для пользователя
  - пример:
    [
      export const metadata = {
          title: 'Next.js',
          description: 'Generated by Next.js',
      }
      
      export default function RootLayout({
          children,
      }: {
          children: React.ReactNode
      }) {
          return (
              <html lang="en">
                  <body>
                      <header
                        style={{
                          backgroundColor: "lightblue",
                          padding: "1rem"
                        }}
                      >
                        <p>Header</p>
                      </header>
      
                      {children}
      
                      <footer
                        style={{
                          backgroundColor: "ghostwhite",
                          padding: "1rem"
                        }}
                      >
                          <p>Footer</p>
                      </footer>
      
                  </body>
              </html>
          )
      }
    ]
  - проверяем: 
    - "http://localhost:3000"
    - "http://localhost:3000/blog/first"


18) "router" переход на страницу из кода
  - создаем файл "app/order-product/page.tsx"
  - текст:
    [
      "use client"
      
      import { useRouter } from "next/navigation";
      
      
      export default function OrderProduct() {
        const router = useRouter();
        const handleClick = () => {
          router.push("/");
        }
      
        return (
          <>
              <h1>Order product</h1>
              <button onClick={handleClick}>Place order</button>
          </>
        )
      }
    ]















[?] ERROR
  - Unexpected behavior when using output: 'export', 
    generateStaticParams(), and export const dynamic
  - solution:
    - https://github.com/vercel/next.js/issues/56253
    - run comands:
      [
        yarn install
        yarn upgrade next@13.4.19
        yarn build
      ]

 

 
// #c 
#----------------------------------------------- 

 

#----------------------------------------------- 
 
