---
Ресурсы:

// оф сайт
- [ https://hub.docker.com/ ]
// крутой набор статей
- [ https://habr.com/post/310460/ ]
// видосики
- [ https://youtu.be/XtO3hUWLKF8?list=PLD5U-C5KK50XMCBkY0U-NLzglcRHzOwAg ]
// дока на русском
- [ https://dker.ru/docs/docker-engine/learn-by-example/manage-data-in-containers/ ]
 


---
элементы документа 

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение 
[*] - важное контекстное примечание 
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку 

---
краткое описание 

- [docker] это способ все завернуть в контейнер.




1) регаемся на докерхабе https://hub.docker.com/:
  - [ dzhukov40 ]
  - [ dzhukov40.v@mail.ru ]
  - [ D..... ]
  
  
2) основы Dockerfile
  - есть две версии Docker
    - Docker Community Edition (CE) (*) работаем с этой версией
    - Docker Enterprise -> это платная версия системы	
  - Docker Это клиент-серверное приложение
    - у нас на сервере живет Docker daemon, который выполняет всю работу
	- подключение к деману происходит черед (Docker Command Line Interface, CLI)


3) основные термины
  - Image (образ) 
    – собранная подсистема, необходимая для работы процесса, сохраненная в образе.
  - Container (контейнер) 
    – процесс, инициализированный на базе образа. То есть контейнер существует только когда запущен. 
	  Это как экземпляр класса, а образ это типа класс. Ну я думаю идея понятна.
  - Host (хост) 
    – среда, в которой запускается докер. Проще говоря – ваша локальная машина.
  - Volume (Том)
    – это дисковое пространство между хостом и контейнером. 
	  Проще – это папка на вашей локальной машине примонтированная внутрь контейнера. 
	  Меняете тут меняется там, и наоборот, миракл.
  - Dockerfile (файл создания образа)
    – файл с набором инструкций для создания образа будущего контейнера
  - Service (сервис) 
    – по сути это запущенный образ (один или несколько контейнеров), дополнительно сконфигурированный такими опциями как открытие портов, маппинг папок (volume) и прочее. 
	  Обычно это делается при помощи docker-compose.yml файла.
  - Docker-compose (запуск связанных контейнеров) 
    – тулза, облегчающая сборку и запуск системы состоящей из нескольких контейнеров, связанных между собой. 
  - Build (билд, билдить) 
    – процесс создания образа из набора инструкций в докерфайле, или нескольких докерфайлов, если билд делается с помощью композера


4) устанавливаем docker на ubuntu:
  - [ https://docs.docker.com/install/linux/docker-ce/ubuntu/ ] 
    - [ sudo apt-get update ] устанавливаем
    - [ sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common ]
    - [ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - ] добавляем ключ
    - [ sudo apt-key fingerprint 0EBFCD88 ] сравниваем отпечаток
    - [ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" ] добавляем ссылку на репозиторий
    - [ sudo apt update ] обновляем индексы
	- [ sudo apt-get install docker-ce docker-ce-cli containerd.io ] устанавливаем докер
    - [ sudo docker run hello-world ] проверяем установленный докер
  - протестируем, скачав и запустив контейнер  
    - [ sudo docker run -it ubuntu bash ] скачается образ и запустится
    - [ exit ] этой командой можем выйти из контейнера

4+) устанавливаем docker на windows
  - [ https://docs.docker.com/docker-for-windows/install/ ]
  - аккаунт на докерХабе -> [ dzhukov40 ]
  - [!] Роль Hyper-V невозможно установить в Windows 10 Домашняя.
  - в биусе отключаем разрешение виртуализации
  - качаем Docker Desktop


5) устанавливаем docker-compose на ubuntu:
  - [ https://docs.docker.com/compose/install/ ]
    - [ sudo curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose ] качаем посл версию
    - [ sudo chmod +x /usr/local/bin/docker-compose ] делаем исполняемым
    - [ docker-compose -v ] проверяем
	
	
6) основные команды для работы с докером
  - (*) чтобы не писать постоянно sudo 
    - [ https://docs.docker.com/install/linux/linux-postinstall/ ]
    - [ sudo groupadd docker ] создаем группу докер
	- [ sudo usermod -aG docker $USER ] добавляем пользователя в группу
  - [ newgrp docker ]
	- [ id ] смторим группы пользователя 
    - [ reboot ] рестартнуть 
  - [ sudo docker pull ubuntu ] команда позволяет скачать образ, ubuntu
  - созданные/скаченные образы пожно посмотреть/удалить
	- [ docker images ] смотрим список образов
	- [ docker rmi $(docker images -q) --force ] удалить все образы
  - [ sudo docker run ubuntu ] запускаем контейнер с образом ubuntu
    - мы не задали что делать образу поэтому он запустился и завершился 
  - [ sudo docker run ubuntu echo "Hello World!" ] теперь мы из контейнера запустили команду
  - [ sudo docker run -it ubuntu ] тут важны флаги [ -it ] мы попадем в терминал ubuntu
  - [ sudo docker ps -a ] получаем список контейнеров из которых вышли
  - смотрим на запущенны контейнер
    - [ sudo docker run --name myDocker1 -it ubuntu ] так мы запустим контейнер присвоив имя
    - [ sudo docker ps ] смотрим запущенные контейнеры
	- [ docker attach myDocker1 ] подключиться к работающему контейнеру
    - [ sudo docker inspect myDocker1 ] получить информацию о запущенном контейнере
    - [ sudo docker diff  myDocker1 ] посмотреть измененные файлы 
    - [ sudo docker logs  myDocker1 ] посмотреть список всех событий в контейнере 
    - [ sudo docker stop myDocker1 ] останавливаем контейнер
  - важные флаги/параметры запуска
    - [ sudo docker run -d ubuntu ] флаг -d говорит запустить контейнер в фоновом режиме
    - [ sudo docker run -p 8000:8080 ubuntu ] флаг -p это проброс портов, сначала порт гостевой машины, потом порт в контейнере 
    - [ sudo docker run -e JAVA_HOME=/home ubuntu ] флаг -e передает значение переменной окружения
  - созданные контейнеры не удаляются после выхода
    - [ sudo docker rm myDocker1 ] удалить контейнер по его имени
    - [ sudo docker rm -v $(sudo docker ps -aq -f status=exited) ] удалить все контейнеры


7) создаем свой образ 
  - основные команды в Dockerfile
    - [ FROM ] указываем базовый образ
    - [ USER ] указать пользователь от которого работаем
    - [ COPY ] копируем файл с основной системы в контейнер
    - [ ARG ] переменные, доступны только при сборке образа, можно передать как параметры
    - [ ENV ] переменная окружения, оступна при запуске контейнера, можно передать как параметры
    - [ WORKDIR ] указываем рабочую директорию
    - [ EXPOSE ] указываем какие порты нужно пробросить
    - [ VOLUME ] мапим папку/файл из гостевой машины в контейнер
    - [ RUN ] выполняем shell-команды из терминала контейнера
    - [ ENTRYPOINT ] указывает команду, которая всегда будет выполняться при запуске контейнера.
    - [ CMD ] указывает аргументы, которые будут переданы в [ENTRYPOINT]
  - создадим образ с использованием Dockerfile
    - у нас есть spring-boot приложение [ webClient-0.0.1.jar ]
    - [ touch Dockerfile ] создаем докер файл
	- содержимое докер файла: [
	  #это образ основа
      FROM openjdk:8-jdk-alpine

      # этот католог машины хоста и он будет двунаправлено доступен в контейнере
	  # удобно мапить базу данных в контейнере на деректорию на хостовой машине для сохранения данных между запусками
      VOLUME /tmp
	  # это аргумент передаваемый в команде build
      ARG JAR_FILE
	  # так мы можем выполнить любую команду внутри контейнера
      RUN echo "$JAR_FILE"
	  # копируем что либо из нашей машины в контейнер 
	  # (*) есть еще команда ADD - она позволет тянуть файл по url и распаковывает архивы
      COPY ${JAR_FILE} app.jar

      # указываем порт нужный нашему контейнеру
      EXPOSE 8080
	  # тут определяем как запускать наш контейнер 
	  # (*) можно указать ключ
      ENTRYPOINT ["java", "-jar", "/app.jar"]
	  ]
	- [ docker build --build-arg JAR_FILE=./webClient-0.0.1.jar -t dzhukov40/myapp  ./ ] собираем образ
	- [ docker images ] смотрим список образов
	- [ docker rmi $(docker images -q) --force ] удалить все образы
	- [ docker run -p 8000:8080 --name myApp dzhukov40/myapp ] запускаем образ
	- [ http://localhost:8000/health-check/check ] топаем в браузер и видем что смапили порт приложения в контейнере на порт гостевой машины
	

8) закидываем образ в dockerHub
  - [ https://hub.docker.com/ ]
  - [ docker login ] при первом пуше надо залогиниться
  - [ docker push dzhukov40/myapp ]
  
  
9) создадим пример docker-compose
  - [ touch docker-compose.yaml ] создадим конфигурационный файл
  - [ https://hub.docker.com/_/mariadb ] тут есть пример для docker-compos файла
  - содержимое докер компос файла: [  
    # Use root/example as user/password credentials
    version: '3.1'

    services:

      db:
        image: mariadb
        restart: always
        environment:
          MYSQL_ROOT_PASSWORD: example

      adminer:
        image: adminer
        restart: always
        ports:
          - 8080:8080
    ]
  - [ docker-compose up ] запускаем докер компос (*) можно запустить в фоне -d
  - [ http://127.0.0.1:8080/ ] топаем в браузер, там увидем клиент DB
  - [ docker-compose ps ] смотрим на запущенные контейнери через докер компос
  - (*) в докер компос можно указывать не image а build и указать путь 
    к скрипту Dockerfile это позволяет запускать образы нами сделанные в докер файлах


10) docker-compose термины
  - services(сервисы) это абстракция, которую можно определить поверх образа
    чтобы настроить дополнительные параметры, число инстансов балансировку,
	потребляемые ресурсы, политику востановления и тд.
  - популярные параметры:
    - replicas(реплики) это число копий экземпляра контейнера
    - resources(ресурсы)
	  - cpus(процессор)
      - memory(память)
	- restart_policy(политика перезапуска)
  - напишем еще один docker-compose файл
    [
version: "3"
services:
  web:
    # мой образ hellow world
    image: dzhukov40/myapp
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: "0.1"
          # memory: 50M
      restart_policy:
        condition: on-failure
    ports:
      - "8080:8080"
    networks:
      - webnet
networks:
  webnet:
	]
  - теперь пробуем запустить это
    - [ docker swarm init --advertise-addr enp0s8 ]
	  - пришлось постафить параметр определяющий сетевой адаптер [ --advertise-addr ]
	  - команда возвращает токен для подключения другой ноды в кластер swarm
	    - пример: docker swarm join --token SWMTKN-1-2...pp 192.168.56.101:2377
	  - [ docker node ls ] смотрим список нод в нашем swarm кластере
	- [ docker stack deploy -c docker-compose.yaml mySwarmApp ] запускаем приложение
  - [ docker service ls ] смотрим запущенный сервис
    - [ docker stack ] другой способ посмотреть запущенные сервисы
  - [ docker service ps mySwarmApp_web ] посмотреть отдельно инстансы(реплики)
  - [ curl http://master:8080 ] можем посмотреть что у нас все работает
    - есть проблемка к прямому обращению к сервису (Failed to connect ...)
 	  - [!] надо подаждвть минуты две и тогда доступ появится
	  - [ nslookup master ] пробуем узнать ip адрес
  - [ docker stack rm mySwarmApp ] убиваем приложение
  - [ docker swarm leave --force ] прекращаем работу в swarm режиме


11) как посмотреть слои образа
  - [ docker history <имя образа> ]
  - пример: [ docker history payment --format "{{.ID}}: {{.CreatedBy}}" --no-trunc ]


12) как примонтировать директорию/файл в контейнер
  - [ -v ] рименяется для монтирования директории
  - [ docker run -v <директория_гостевой_ос>:<директория_ос_докере> --name store ubuntu:14.04 ]
    - пример [ docker run -it --rm -v $(pwd):/home ubuntu:14.04 ]

13) как совместно использовать контейнерами директорию/файл гостевой ОС
  - [ docker run -v <директория_гостевой_ос>:<директория_ос_докере>  ubuntu:14.04 ] 
    - апускаем контейнер с примонтированными директориями
  - [ --volumes-from ] теперь при запуске нового контейнера мы будем ссылаться на него
    - [ docker run -it --rm --volumes-from store ubuntu] (*) [ store ] это имя контейнера

14) как удалить тома докерфа
  - [ docker volume ls -qf dangling=true ] посмотреть список томов без контейнеров
  - [ docker volume rm $(docker volume ls -qf dangling=true) ] удалить не используемые контейнеры

15) как пробросить порт
  - [ docker run -d --name port-export -p <port_on_host_machine>:<port_inside_container> image ]

16) как подключиться к уже запущенному контейнеру
  - [ docker ps ] смотрим какие контейнеры доступны
  - [ docker exec -it <container-name> bash ] подключаемся

17) как настроить сетевое взаимодействие
  - [ docker network ls ] посмотрим сети
    - (*) сети: [ bridge , host , none ]
    - [ brige ] выбор по умолчанию, контейнеры запускаются в одной и той же сети 
      - взаимодествовать контейнерам можно только по ip что не удобно
      - чтобы обращаться по имени нужно использовать свою кастомную сеть
    - [ none ] можно указать эту сеть чтобы контейнер запустилься в личной сети 
    - [ host ] контейнеры запускаются напрямую на родительской машине
  - создаем свою сеть
    - [ docker network create <имя_сети> ] 
    - [ docker network inspect <имя_сети> ] смотрим созданную сеть
    - [ docker run -it --rm --name one --network=<имя_сети> ubuntu:14.04 ] запуск в нашей сети
    - (*) при запуске контейнеров в нами созданной сети, можно обращаться по именам!!
 
18) как на создать новый образ, поменяв в нем точку выхода
  - [ docker commit --change='CMD ["python3"]' <старый_образ>  <новый образ> ]

19) как оптимально написать команду установки пакетов
  - RUN apt-get update && apt-get install -y \
    nano \
    git


20) Многоэтапные сборки (multi-stage builds)
  - Каждая инструкция в докерфайле создает новый слой,
    поэтому чтобы усеньшить число соев предлогалось 
    использовать скрипты и другую логику, чтобы поддерживать 
    минимально возможный размер слоя.
  - (multi-module Maven project) чтобы собрать модуль мультимодульного 
    проекта в докере надо выбрать корректно точку контекста докера, так как 
    выйти из него в Dockerfile не получится
    - команда сборки
      - [ docker build  .. --tag myApp -f ./Dockerfile ]
  - пример Dockerfile: 
    [
      #
      # BUILD STAGE
      #
      FROM maven:3.6.3-jdk-11 AS BUILD_STAGE
      COPY . /usr/proect/
      RUN mvn -f /proect/pom.xml -pl htc-gateway -pl sub-project clean package -am


      #
      # RUN STAGE
      #
      FROM openjdk:11 AS RUN_STAGE
      COPY --from=BUILD_STAGE /usr/proect/htc-gateway/target/*-spring-boot.jar /usr/app/app.jar
      EXPOSE 8080

      ENTRYPOINT ["java", "-jar", "/usr/app/app.jar"]
    ]






 




[?] как подключиться из запущенного контейнера к порту гостевой машине
  - есть проблема что у нас запущен контейнер и мы хотим достучаться 
    до других приложений запущенных на гостевой машине
  - [ https://docs.docker.com/docker-for-mac/networking/ ] 
    - получается мы можем разрезолвить IP гостевой машины: [ host.docker.internal ]
    - это пингуется и получилось заюзать в nginx 
      [  
        location /gateway {
            proxy_pass http://host.docker.internal:8080;
        }
      ]

[?] как завернуть spring Boot app в Docker
  - [ https://github.com/spring-guides/gs-spring-boot-docker ]

[?] мощный плагин для заворацивания в докер
  - [ jib ] -> [ https://github.com/GoogleContainerTools/jib ]
  - [ spring-boot-maven-plugin ] -> [ https://docs.spring.io/spring-boot/docs/current/maven-plugin/ ]

[?] как при запуске приложения прокинуть профайл
  - [ -e "SPRING_PROFILES_ACTIVE=prod" ] spring options
  - [ -e "JAVA_TOOL_OPTIONS=-Ddebug" ] jvm options

[?] как задать ARG в мультистейджевом докерфайле
  - задаем самой первой строкой, потом в каждом стейдже повторяем определение, 
    но значение не ставим
  - [
      ARG version_default=v1

      FROM alpine:latest as base1
      ARG version_default
      ...

      FROM alpine:latest as base2
      ARG version_default
      ...
   ]

[?] как ARG значение перекинуть в ENV чтобы использовать при запуске
  - хорошей практикой является сохранение имени
  - [
      ARG MY_VAR=test
      ENV MY_VAR=${MY_VAR}
  ]

[?] как срыть часть файлов от копирования в докер 
  - [ .dockerignore ] надо создать файл с набором правил

[?] как вытащить файл из докера контейнера или положить в докер контейнер
  - https://medium.com/@gchudnov/copying-data-between-docker-containers-26890935da3f
  - пример как вытащить файл: 
    - [ docker cp <имя запущенного контейнера>:<прямой путь к файлу>  <путь на хосте> ]
  

[?] nop
  - nop

 
 
// #nop
#----------------------------------------------- 

  [!] nop

#----------------------------------------------- 
 
