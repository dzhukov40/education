#!/bin/bash

msg1="http://www.opennet.ru/docs/RUS/zlp/index.html
!-!  копирование каталога с содержимым [ cp -r ./test_8 ./test_9 ]"

msg2="Вы уже знаете из предыдущей главы, что при запуске программы 
в системе создается новый процесс. У каждого процесса (кроме init) 
есть свой родительский процесс (parent process или просто parent), 
для которого новоиспеченный процесс является дочерним (child process, child). 
Каждый процесс получает копию окружения (environment) родительского процесса. 
Оказывается, кроме окружения дочерний процесс получает в качестве багажа еще 
и копию таблицы файловых дескрипторов.

   Чтобы получить возможность прочитать что-то из файла или записать что-то 
   в файл, его нужно открыть. Это делает системный вызов [open()].
   [int open (const char * filename, int flags, ...);]

   Системный вызов close() закрывает файл. Вообще говоря, по завершении 
   процесса все открытые файлы (кроме файлов с дескрипторами 0, 1 и 2) 
   автоматически закрываются.
   [int close (int fd);]

Файловый дескриптор (file descriptor) - это целое число (int), соответствующее 
открытому файлу. Дескриптор, соответствующий реально открытому файлу всегда 
больше или равен нулю. Копия таблицы дескрипторов скрыта в ядре. Мы не можем 
получить прямой доступ к этой таблице, как при работе с окружением через environ.
Программист должен лишь понимать, что каждый процесс имеет свою копию таблицы 
дескрипторов. В пределах одного процесса все дескрипторы уникальны (даже если они 
соответствуют одному и тому же файлу или устройству). В разных процессах дескрипторы 
могут совпадать или не совпадать - это не имеет никакого значения, поскольку у 
каждого процесса свой собственный набор открытых файлов."

msg3='Таблица дескрипторов, помимо всего прочего, содержит информацию о текущей 
позиции чтения-записи для каждого дескриптора. При открытии файла, позиция 
чтения-записи устанавливается в ноль. Каждый прочитанный или записанный байт 
увеличивает на единицу указатель текущей позиции.'

echo "$msg1"
echo ""
echo "$msg2"
echo ""
echo "$msg3"
