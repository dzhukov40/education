---
Ресурсы:

// оф сайт
- [ https://projectlombok.org/ ]
 


---
элементы документа 

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение 
[*] - важное контекстное примечание 
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку 

---
краткое описание 

- [ lombok ] фреймворк позволяющий не писать шаблонный код




1) подключение
  - подключаем к проекту как зависимость
  - при использовании lombok наш код не будет валидным, так как за нас его будут генерить
    - поэтому надо подключить плагин в идее lombok
  - через плагин в идее можно посмотреть код который будет сгенерен аннотацией ломбока
    - [ функция “de-lombok” ]



2) аннотации
  - [ @Slf4j ] позволяет автоматически в классе создать экземпляр класса логера
    - есть целый набор таких аннотаций [  @CommonsLog, @JBossLog, Log, @Log4j, @Log4j2, @Slf4j, @XSlf4j ]
    - что то такое теперь можно не писать
    - [ private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(UserService.class); ]
  - [ @Builder ] добавляет билдер в класс
    - [ @Singular ] аннотация для помощи работы с коллекциям в билдере
  - [ @Getter ] создать гетеры
  - [ @Setter ] создать сетеры
  - [ @ToString ] добавляет стандартную реализацию
  - [ @EqualsAndHashCode ] добавляет эти методы
  - генерим конструктор:
    - [ @NoArgsConstructor ] сделать пустой конструктоп
    - [ @RequiredArgsConstructor ] конструктор включающий все final поля
    - [ @AllArgsConstructor ] включить в конструктор все поля
  - [ @SneakyThrow ] позволяет обернуть проверяемое исключение в не проверяемое



4) агригирующие аннотации, состоящии из кучи аннотаций
  - [ @Data ] класс для храненияданных
    - содержит: [ @ToString, @EqualsAndHashCode, Getter, Setter, @RequiredArgsConstructor ]
  - [ @Value ] это аналог @Data но делает класс не изменяемым














[?] nop
  - nop

 
 
// #c 
#----------------------------------------------- 

 

#----------------------------------------------- 
 
