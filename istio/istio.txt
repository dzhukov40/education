---
Ресурсы:

// оф сайт
- [ https://istio.io ]
- [ https://habr.com/ru/company/flant/blog/438426/ ] 
 


---
элементы документа 

[?] - информация потенциально для многократного использования
[!] - была ошибка, недочет, нашли решение 
[*] - важное контекстное примечание 
[#<имяТега>] - так можим выносить различного рода информацию, оставляя ссылку 

---
краткое описание 

- [ istio ] Open Source-проект. Это имплементация (service mesh)
Он решает сложности, возникающие в приложениях, 
основанных на микросервисах, например, такие как:
  - Управление трафиком: таймауты, повторные попытки, балансировка нагрузки;
  - Безопасность: аутентификация и авторизация конечного пользователя;
  - Наблюдаемость: трассировка, мониторинг, логирование.


1) установка
  - [ https://istio.io/docs/setup/getting-started/ ]
  - устанавливаем (скачиваем последний релиз)
    - [ curl -L https://istio.io/downloadIstio | sh - ]
    - получим папку с [ istio ]
    - добавляем в PATH путь до [ istioctl ] -> [ export PATH=$PWD/bin:$PATH ]
  - ...
  - чтобы руками не добавлять [ inject Envoy sidecar  proxies ] 
    перед деплоем наших микросервисов мы можем пометить неймспейс, 
    чтобы [ istio ] автоматически добавлял сайдкары к подам
    - [ kubectl label namespace default istio-injection=enabled ]
  - ...
  - тепперь надо поставить [ istio ] в кластер
    - [ istioctl manifest apply --set profile=demo  ]
      - есть способ кастомизировать свою установку
        - [ istioctl manifest apply --set addonComponents.grafana.enabled=true ]
    - как теперь удалить установленное
      - [ istioctl manifest generate --set profile=demo | kubectl delete -f - ]
  - ...
  - теперь нужно настроить [ istio ingress ]


2) Архитектура Istio
  - [ https://habr.com/ru/company/flant/blog/438426/ ]
  - [ Envoy ] сайдкар который прикрепляется ко всем подам.
    - это L3/L4 прокси
    - модефицирует iptables и все сетевые запросы/ответы начинают ходить через "envoy"
  - [ Control plane ]
    - для конфигурирования Istio используются кастомные манифесты [ networking.istio.io/v1alpha3 ]
      - [ Kubernetes CRD (Custom Resource Definitions) ] это механизм позволяющий разширять API кубернетиса. 
        - [ https://habr.com/ru/company/mailru/blog/515138/ ]
        - [ CRD ] это просто таблица в базе данных, в которую мы можем засовывать строчки
        - [ RD ] это запись в таблице
        - так мы можем создавать свои таблицы и записи в Kubernetis, чтобы их потом читать.
        - получается Istio использует это расширение, чтобы хранить свои настройки в Kubernetes
        - посмотреть можно разными способами, также поддерживаются CRUD операции
          - [ kubctl get crd ] 
          - [ oc get serviceentries ] , [ oc get virtualservices ] , [ oc get destinationrules ] ...
          - [ oc get serviceentries <name> ] , [ oc get virtualservices <name> ] ...
          - [ oc get crd gateway.networking.istio.io ] [ oc get crd virtualservice.networking.istio.io ] ...
    - [ Gallery ] хранит конфигурацию для "Envoy"
    - [ Pilot ] управляет "Envoy" в подах. Конфигурирует и регестрирует (ServiceDiscovery)
      - Он следит за подами, сервисами и конечными точками в кластере Kubernetes, 
        чтобы потом дать нужную конфигурацию всем sidecar-ам Envoy, подключенным к Pilot. 
        Это мост между Kubernetes и Envoy.
    - [ Mixer ] получает логи, метрики, трассировка от "Envoy"
    - [ Citadel ] защита трафика (TLS certs)
      - имя сервиса "istio-citadel"


3) Настройка istio
  - Когда мы применяем ресурсы Istio, Kubernetes API Server создаёт событие, 
    которое получает "Istio Control Plane", и уже после этого новая конфигурация 
    применяется к прокси-серверам "Envoy" каждого pod'а.


4) Ingress Gateway
  - Весь входящий трафик в кластер должен идти через этот компонент. Это входная точка.
  - Представляется очередным Envoy, сконфигурированным в Control Plane
  - Создается при установке Isti   


5) Gateway
  - это CRD (Custom Resource Definition) в Kubernetes создаваймый при установке istio.
  - позволяет определить протоколы, порты, хосты, для которых мы хотим разрешить входящий трафик.
    Этим компонентом дается набор разрешений для входящего трафика, 
    но куда его маршрутизировать настраивается через "VirtualService"
  - (*) важным моментом является указание имени "Ingress Gateway" с помощью селектора.


6) VirtualService
  - компонент от istio для определения машрута трафика
  - [ gateways ] поле определяем точку откуда приходит трафик "kind: Gateway"
  - [ match ] поле определяем условие маршрутизации трафика
  - [ destination ] поле определяет сервис куда отправлять трафик "kind: Service"
    - можем распределить трафик по процентам на разные сервисы


7) DestinationRule
  - позволяет определить балансировку трафика.
  - определяем маршрут в "VirtualService", а в "DestinationRule" настраиваем балансировку.
  - можем настроить зеркалирование, таймауты, повторные попытки, 
    канареечные выкатыб Circuit Breaker, Bulkhead.

8) ServiceEntry
  - позволяет определить куда вне kubernetes кластера можно ходить
  - при поключении Istio весь исходящий трафик от подов будет залочен


9) Egress gateway
  - это "kind: Gateway" но селектором выбираем "istio: egressgateway"
  - также нам нужен "Kind: virtualService" и "kind: DestinationRule"









[?] как исключить исходящий трафик из пода
  - [ https://istio.io/latest/docs/reference/config/annotations/ ]
  - чтобы исключить IP адреса
    - [ traffic.sidecar.istio.io/includeOutboundIPRanges ]

[?] как получить yaml манифест задеплоенной сущности
  - [ oc get <TYPE> <NAME> -o yaml --export ]

[?] как сделать манифест и устанавливать через него и удалить [ istio ]
  - генерим манифест
    - [ istioctl manifest generate <your original installation options> > ./generated-manifest.yaml ]
  - проверяем нагенеренный манифест
    - [ istioctl verify-install -f ./generated-manifest.yaml ]
  - устанавливаем [ istio ] из созданного манифеста
    - [ kubectl apply -f ./generated-manifest.yaml ]
  - удаляем по созданному манивесту [ istio ]
    - [ cat ./generated-manifest.yaml | kubectl delete -f - ]


[?] как в [ minikube ] разрешить работу [ LoadBalancer ]  
  - [ https://minikube.sigs.k8s.io/docs/handbook/accessing/#loadbalancer-access ]
  - [ minikube tunnel ] (*) потребует пароль
    - [ minikube tunnel --cleanup ] иногда зависает, возможно надо иногдв вызывать 
  - получаем ip от [ istio ingress ]
    - [ kubectl get svc istio-ingressgateway -n istio-system ]
  - быстро поправить файлик
    - [ sudo vim /etc/hosts ]
    - [ :%s/old/new/g ] -> [ :%s/10.103.37.80/10.100.35.27/g ]



[?] nop
  - nop

 
 
// #c 
#----------------------------------------------- 

 

#----------------------------------------------- 
 
